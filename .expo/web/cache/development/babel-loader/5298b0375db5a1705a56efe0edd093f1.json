{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar GameClass = function () {\n  function GameClass() {\n    _classCallCheck(this, GameClass);\n\n    this.complications = [{\n      level: [1, 3],\n      flaskCount: 3,\n      ballCount: 2\n    }];\n    this.level = 0;\n  }\n\n  _createClass(GameClass, [{\n    key: \"mixData\",\n    value: function mixData(data) {\n      var deepData = JSON.parse(JSON.stringify(data));\n\n      for (var i = 0; i < data.length - 1; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n          Math.floor(Math.random() * (data.length - 2));\n          var rand1 = Math.floor(Math.random() * (data.length - 1));\n          var rand2 = Math.floor(Math.random() * data[i].length);\n          var rand3 = Math.floor(Math.random() * (data.length - 1));\n          var rand4 = Math.floor(Math.random() * data[i].length);\n          var prev = deepData[rand1][rand2];\n          deepData[rand1][rand2] = deepData[rand3][rand4];\n          deepData[rand3][rand4] = prev;\n        }\n      }\n\n      return deepData;\n    }\n  }, {\n    key: \"checkAndReturnMixData\",\n    value: function checkAndReturnMixData(data, total) {\n      var mix = this.mixData(data);\n\n      if (Object.values(this.checkWin(mix, total)).some(function (i) {\n        return i;\n      })) {\n        return this.checkAndReturnMixData(data, total);\n      }\n\n      return mix;\n    }\n  }, {\n    key: \"makeJson\",\n    value: function makeJson(complicationConfig) {\n      var data = [];\n      var flaskTotal = [];\n\n      for (var i = 0; i < complicationConfig.flaskCount; i++) {\n        var total = 0;\n        data.push([]);\n\n        for (var j = 0; j < complicationConfig.ballCount; j++) {\n          var rand = Math.floor(Math.random() * 9 + 1);\n          total += rand;\n          data[i].push(rand);\n        }\n\n        flaskTotal.push(total);\n      }\n\n      data.push([]);\n      return {\n        actualData: data,\n        mixedData: this.checkAndReturnMixData(data, flaskTotal),\n        flaskTotal: flaskTotal\n      };\n    }\n  }, {\n    key: \"makeLevel\",\n    value: function makeLevel(complicationConfig) {\n      var _this$makeJson = this.makeJson(complicationConfig),\n          actualData = _this$makeJson.actualData,\n          mixedData = _this$makeJson.mixedData,\n          flaskTotal = _this$makeJson.flaskTotal;\n\n      this.data = {\n        actualData: actualData,\n        mixedData: mixedData,\n        flaskTotal: flaskTotal\n      };\n    }\n  }, {\n    key: \"start\",\n    value: function start(level) {\n      this.level = level;\n      this.data = null;\n      this.currentComplications = null;\n      var complicationConfig = this.getComplication(this.level);\n\n      if (complicationConfig) {\n        this.currentComplications = complicationConfig;\n        this.makeLevel(complicationConfig);\n      }\n    }\n  }, {\n    key: \"getComplication\",\n    value: function getComplication(level) {\n      return this.complications.find(function (i) {\n        return level >= i.level[0] && level < i.level[1];\n      });\n    }\n  }, {\n    key: \"canSet\",\n    value: function canSet(index) {\n      return this.data.mixedData[index].length < this.currentComplications.ballCount;\n    }\n  }, {\n    key: \"changeData\",\n    value: function changeData(from, to) {\n      var dataDeep = JSON.parse(JSON.stringify(this.data));\n      dataDeep.mixedData[to].unshift(dataDeep.mixedData[from][0]);\n      dataDeep.mixedData[from] = dataDeep.mixedData[from].slice(1);\n      this.data = dataDeep;\n    }\n  }, {\n    key: \"checkWin\",\n    value: function checkWin(data, flaskTotal) {\n      var obj = {};\n\n      for (var i = 0; i < data.length - 1; i++) {\n        obj[i] = !!(data[i].length === this.currentComplications.ballCount && data[i].reduce(function (accumulator, curr) {\n          return accumulator + curr;\n        }) === flaskTotal[i]);\n      }\n\n      return obj;\n    }\n  }]);\n\n  return GameClass;\n}();\n\nexport { GameClass as default };","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/src/Classes/Game.js"],"names":["GameClass","complications","level","flaskCount","ballCount","data","deepData","JSON","parse","stringify","i","length","j","Math","floor","random","rand1","rand2","rand3","rand4","prev","total","mix","mixData","Object","values","checkWin","some","checkAndReturnMixData","complicationConfig","flaskTotal","push","rand","actualData","mixedData","makeJson","currentComplications","getComplication","makeLevel","find","index","from","to","dataDeep","unshift","slice","obj","reduce","accumulator","curr"],"mappings":";;;IAAqBA,S;;;;SAGjBC,a,GAAgB,CACZ;AACIC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CADX;AAEIC,MAAAA,UAAU,EAAC,CAFf;AAGIC,MAAAA,SAAS,EAAE;AAHf,KADY,C;SAOhBF,K,GAAQ,C;;;;;WAER,iBAAQG,IAAR,EAAa;AACT,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,IAAf,CAAX,CAAjB;;AACA,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEL,IAAI,CAACM,MAAL,GAAc,CAAhC,EAAmCD,CAAC,EAApC,EAAuC;AACnC,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEP,IAAI,CAACK,CAAD,CAAJ,CAAQC,MAAxB,EAAgCC,CAAC,EAAjC,EAAoC;AAChCC,UAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,IAAI,CAACM,MAAL,GAAc,CAA/B,CAAX;AACA,cAAMK,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,IAAI,CAACM,MAAL,GAAc,CAA/B,CAAX,CAAd;AACA,cAAMM,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBV,IAAI,CAACK,CAAD,CAAJ,CAAQC,MAApC,CAAd;AACA,cAAMO,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,IAAI,CAACM,MAAL,GAAc,CAA/B,CAAX,CAAd;AACA,cAAMQ,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiBV,IAAI,CAACK,CAAD,CAAJ,CAAQC,MAApC,CAAd;AACA,cAAMS,IAAI,GAAGd,QAAQ,CAACU,KAAD,CAAR,CAAgBC,KAAhB,CAAb;AACAX,UAAAA,QAAQ,CAACU,KAAD,CAAR,CAAgBC,KAAhB,IAAyBX,QAAQ,CAACY,KAAD,CAAR,CAAgBC,KAAhB,CAAzB;AACAb,UAAAA,QAAQ,CAACY,KAAD,CAAR,CAAgBC,KAAhB,IAAyBC,IAAzB;AACH;AACJ;;AACD,aAAOd,QAAP;AACH;;;WAED,+BAAsBD,IAAtB,EAA4BgB,KAA5B,EAAkC;AAC9B,UAAMC,GAAG,GAAG,KAAKC,OAAL,CAAalB,IAAb,CAAZ;;AACA,UAAImB,MAAM,CAACC,MAAP,CAAc,KAAKC,QAAL,CAAcJ,GAAd,EAAmBD,KAAnB,CAAd,EAAyCM,IAAzC,CAA8C,UAAAjB,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAA/C,CAAJ,EAA0D;AACtD,eAAO,KAAKkB,qBAAL,CAA2BvB,IAA3B,EAAiCgB,KAAjC,CAAP;AACH;;AACD,aAAOC,GAAP;AACH;;;WAED,kBAASO,kBAAT,EAA6B;AACzB,UAAMxB,IAAI,GAAG,EAAb;AACA,UAAMyB,UAAU,GAAG,EAAnB;;AACA,WAAI,IAAIpB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEmB,kBAAkB,CAAC1B,UAArC,EAAiDO,CAAC,EAAlD,EAAqD;AACjD,YAAIW,KAAK,GAAG,CAAZ;AACAhB,QAAAA,IAAI,CAAC0B,IAAL,CAAU,EAAV;;AACA,aAAI,IAAInB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEiB,kBAAkB,CAACzB,SAAnC,EAA8CQ,CAAC,EAA/C,EAAkD;AAC9C,cAAMoB,IAAI,GAAGnB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAiB,CAAjB,GAAsB,CAAjC,CAAb;AACAM,UAAAA,KAAK,IAAGW,IAAR;AACA3B,UAAAA,IAAI,CAACK,CAAD,CAAJ,CAAQqB,IAAR,CAAaC,IAAb;AACH;;AACDF,QAAAA,UAAU,CAACC,IAAX,CAAgBV,KAAhB;AACH;;AACDhB,MAAAA,IAAI,CAAC0B,IAAL,CAAU,EAAV;AACA,aAAO;AACHE,QAAAA,UAAU,EAAE5B,IADT;AAEH6B,QAAAA,SAAS,EAAE,KAAKN,qBAAL,CAA2BvB,IAA3B,EAAiCyB,UAAjC,CAFR;AAGHA,QAAAA,UAAU,EAAVA;AAHG,OAAP;AAKH;;;WAED,mBAAUD,kBAAV,EAA6B;AACzB,2BAA4C,KAAKM,QAAL,CAAcN,kBAAd,CAA5C;AAAA,UAAOI,UAAP,kBAAOA,UAAP;AAAA,UAAmBC,SAAnB,kBAAmBA,SAAnB;AAAA,UAA8BJ,UAA9B,kBAA8BA,UAA9B;;AACA,WAAKzB,IAAL,GAAY;AAAE4B,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,SAAS,EAATA,SAAd;AAAyBJ,QAAAA,UAAU,EAAVA;AAAzB,OAAZ;AACH;;;WAED,eAAM5B,KAAN,EAAY;AACR,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKG,IAAL,GAAY,IAAZ;AACA,WAAK+B,oBAAL,GAA4B,IAA5B;AACA,UAAMP,kBAAkB,GAAG,KAAKQ,eAAL,CAAqB,KAAKnC,KAA1B,CAA3B;;AACA,UAAI2B,kBAAJ,EAAuB;AACnB,aAAKO,oBAAL,GAA4BP,kBAA5B;AACA,aAAKS,SAAL,CAAeT,kBAAf;AACH;AACJ;;;WAED,yBAAgB3B,KAAhB,EAAsB;AAClB,aAAO,KAAKD,aAAL,CAAmBsC,IAAnB,CAAwB,UAAA7B,CAAC;AAAA,eAAIR,KAAK,IAAIQ,CAAC,CAACR,KAAF,CAAQ,CAAR,CAAT,IAAuBA,KAAK,GAAGQ,CAAC,CAACR,KAAF,CAAQ,CAAR,CAAnC;AAAA,OAAzB,CAAP;AACH;;;WAED,gBAAOsC,KAAP,EAAa;AACT,aAAO,KAAKnC,IAAL,CAAU6B,SAAV,CAAoBM,KAApB,EAA2B7B,MAA3B,GAAoC,KAAKyB,oBAAL,CAA0BhC,SAArE;AACH;;;WAED,oBAAWqC,IAAX,EAAiBC,EAAjB,EAAoB;AAChB,UAAMC,QAAQ,GAAGpC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKJ,IAApB,CAAX,CAAjB;AACAsC,MAAAA,QAAQ,CAACT,SAAT,CAAmBQ,EAAnB,EAAuBE,OAAvB,CAA+BD,QAAQ,CAACT,SAAT,CAAmBO,IAAnB,EAAyB,CAAzB,CAA/B;AACAE,MAAAA,QAAQ,CAACT,SAAT,CAAmBO,IAAnB,IAA2BE,QAAQ,CAACT,SAAT,CAAmBO,IAAnB,EAAyBI,KAAzB,CAA+B,CAA/B,CAA3B;AACA,WAAKxC,IAAL,GAAYsC,QAAZ;AACH;;;WAED,kBAAStC,IAAT,EAAeyB,UAAf,EAA0B;AACtB,UAAMgB,GAAG,GAAG,EAAZ;;AACA,WAAI,IAAIpC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEL,IAAI,CAACM,MAAL,GAAY,CAA9B,EAAgCD,CAAC,EAAjC,EAAoC;AAChCoC,QAAAA,GAAG,CAACpC,CAAD,CAAH,GAAS,CAAC,EAAEL,IAAI,CAACK,CAAD,CAAJ,CAAQC,MAAR,KAAmB,KAAKyB,oBAAL,CAA0BhC,SAA7C,IAA0DC,IAAI,CAACK,CAAD,CAAJ,CAAQqC,MAAR,CAAe,UAACC,WAAD,EAAcC,IAAd;AAAA,iBAAuBD,WAAW,GAAGC,IAArC;AAAA,SAAf,MAA8DnB,UAAU,CAACpB,CAAD,CAApI,CAAV;AACH;;AACD,aAAOoC,GAAP;AACH;;;;;;SA/FgB9C,S","sourcesContent":["export default class GameClass {\r\n    data;\r\n    currentComplications;\r\n    complications = [\r\n        {\r\n            level: [1, 3],\r\n            flaskCount:3,\r\n            ballCount: 2\r\n        }\r\n    ]\r\n    level = 0;\r\n\r\n    mixData(data){\r\n        const deepData = JSON.parse(JSON.stringify(data));\r\n        for(let i = 0; i< data.length - 1; i++){\r\n            for(let j=0; j< data[i].length; j++){\r\n                Math.floor(Math.random() * (data.length - 2));\r\n                const rand1 = Math.floor(Math.random() * (data.length - 1));\r\n                const rand2 = Math.floor(Math.random() * (data[i].length));\r\n                const rand3 = Math.floor(Math.random() * (data.length - 1));\r\n                const rand4 = Math.floor(Math.random() * (data[i].length));\r\n                const prev = deepData[rand1][rand2];\r\n                deepData[rand1][rand2] = deepData[rand3][rand4];\r\n                deepData[rand3][rand4] = prev;\r\n            }\r\n        }\r\n        return deepData;\r\n    }\r\n\r\n    checkAndReturnMixData(data, total){\r\n        const mix = this.mixData(data);\r\n        if (Object.values(this.checkWin(mix, total)).some(i => i)){\r\n            return this.checkAndReturnMixData(data, total);\r\n        }\r\n        return mix;\r\n    }\r\n\r\n    makeJson(complicationConfig) {\r\n        const data = [];\r\n        const flaskTotal = [];\r\n        for(let i = 0; i< complicationConfig.flaskCount; i++){\r\n            let total = 0;\r\n            data.push([]);\r\n            for(let j=0; j< complicationConfig.ballCount; j++){\r\n                const rand = Math.floor(Math.random() * (9) + 1);\r\n                total+= rand;\r\n                data[i].push(rand)\r\n            }\r\n            flaskTotal.push(total);\r\n        }\r\n        data.push([]);\r\n        return {\r\n            actualData: data,\r\n            mixedData: this.checkAndReturnMixData(data, flaskTotal),\r\n            flaskTotal\r\n        }\r\n    }\r\n\r\n    makeLevel(complicationConfig){\r\n        const {actualData, mixedData, flaskTotal} = this.makeJson(complicationConfig);\r\n        this.data = { actualData, mixedData, flaskTotal};\r\n    }\r\n\r\n    start(level){\r\n        this.level = level;\r\n        this.data = null;\r\n        this.currentComplications = null;\r\n        const complicationConfig = this.getComplication(this.level);\r\n        if (complicationConfig){\r\n            this.currentComplications = complicationConfig;\r\n            this.makeLevel(complicationConfig);\r\n        }\r\n    }\r\n\r\n    getComplication(level){\r\n        return this.complications.find(i => level >= i.level[0] && level < i.level[1]);\r\n    }\r\n    \r\n    canSet(index){\r\n        return this.data.mixedData[index].length < this.currentComplications.ballCount;\r\n    }\r\n\r\n    changeData(from, to){\r\n        const dataDeep = JSON.parse(JSON.stringify(this.data));\r\n        dataDeep.mixedData[to].unshift(dataDeep.mixedData[from][0]);\r\n        dataDeep.mixedData[from] = dataDeep.mixedData[from].slice(1);\r\n        this.data = dataDeep;\r\n    }\r\n\r\n    checkWin(data, flaskTotal){\r\n        const obj = {};\r\n        for(let i = 0; i< data.length-1;i++){\r\n            obj[i] = !!(data[i].length === this.currentComplications.ballCount && data[i].reduce((accumulator, curr) => accumulator + curr) === flaskTotal[i])\r\n        }\r\n        return obj;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}