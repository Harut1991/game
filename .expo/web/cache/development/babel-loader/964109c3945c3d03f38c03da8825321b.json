{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Constants } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\nimport View from \"../view\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TRACK_SIZE = 6;\nvar THUMB_SIZE = 24;\nvar BORDER_WIDTH = 6;\nvar SHADOW_RADIUS = 4;\nvar DEFAULT_COLOR = Colors.grey50;\nvar ACTIVE_COLOR = Colors.violet30;\nvar INACTIVE_COLOR = Colors.grey60;\nvar defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  thumbHitSlop: {\n    top: 10,\n    bottom: 10,\n    left: 24,\n    right: 24\n  }\n};\n\nvar Slider = function (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n    _this.thumb = undefined;\n    _this._thumbStyles = {};\n    _this.minTrack = undefined;\n    _this._minTrackStyles = {};\n    _this._x = 0;\n    _this._dx = 0;\n    _this._thumbAnimationConstants = {\n      duration: 100,\n      defaultScaleFactor: 1.5\n    };\n    _this.initialValue = _this.getRoundedValue(_this.props.value);\n    _this.lastValue = _this.initialValue;\n    _this.initialThumbSize = {\n      width: THUMB_SIZE,\n      height: THUMB_SIZE\n    };\n\n    _this.handleMoveShouldSetPanResponder = function () {\n      return true;\n    };\n\n    _this.handlePanResponderGrant = function () {\n      _this.updateThumbStyle(true);\n\n      _this._dx = 0;\n\n      _this.onSeekStart();\n    };\n\n    _this.handlePanResponderMove = function (_e, gestureState) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var dx = gestureState.dx * (Constants.isRTL ? -1 : 1);\n\n      _this.update(dx - _this._dx);\n\n      _this._dx = dx;\n    };\n\n    _this.handlePanResponderEnd = function () {\n      _this.updateThumbStyle(false);\n\n      _this.bounceToStep();\n\n      _this.onSeekEnd();\n    };\n\n    _this.scaleThumb = function (start) {\n      var scaleFactor = start ? _this.calculatedThumbActiveScale() : 1;\n\n      _this.thumbAnimationAction(scaleFactor);\n    };\n\n    _this.thumbAnimationAction = function (toValue) {\n      var thumbActiveAnimation = _this.state.thumbActiveAnimation;\n      var duration = _this._thumbAnimationConstants.duration;\n      Animated.timing(thumbActiveAnimation, {\n        toValue: toValue,\n        duration: duration,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.setMinTrackRef = function (ref) {\n      _this.minTrack = ref;\n    };\n\n    _this.setThumbRef = function (ref) {\n      _this.thumb = ref;\n    };\n\n    _this.calculatedThumbActiveScale = function () {\n      var _this$props = _this.props,\n          activeThumbStyle = _this$props.activeThumbStyle,\n          thumbStyle = _this$props.thumbStyle,\n          disabled = _this$props.disabled,\n          disableActiveStyling = _this$props.disableActiveStyling;\n\n      if (disabled || disableActiveStyling) {\n        return 1;\n      }\n\n      var defaultScaleFactor = _this._thumbAnimationConstants.defaultScaleFactor;\n\n      if (!activeThumbStyle || !thumbStyle) {\n        return defaultScaleFactor;\n      }\n\n      var scaleRatioFromSize = Number(activeThumbStyle.height) / Number(thumbStyle.height);\n      return scaleRatioFromSize || defaultScaleFactor;\n    };\n\n    _this.updateTrackStepAndStyle = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this._x = nativeEvent.locationX;\n\n      _this.updateValue(_this._x);\n\n      if (_this.props.step > 0) {\n        _this.bounceToStep();\n      } else {\n        _this.updateStyles(_this._x);\n      }\n    };\n\n    _this.onOrientationChanged = function () {\n      _this.initialValue = _this.lastValue;\n\n      _this.setState({\n        measureCompleted: false\n      });\n    };\n\n    _this.onValueChange = function (value) {\n      _this.lastValue = value;\n\n      _.invoke(_this.props, 'onValueChange', value);\n    };\n\n    _this.onContainerLayout = function (nativeEvent) {\n      _this.handleMeasure('containerSize', nativeEvent);\n    };\n\n    _this.onTrackLayout = function (nativeEvent) {\n      _this.setState({\n        measureCompleted: false\n      });\n\n      _this.handleMeasure('trackSize', nativeEvent);\n    };\n\n    _this.onThumbLayout = function (nativeEvent) {\n      _this.handleMeasure('thumbSize', nativeEvent);\n    };\n\n    _this.handleTrackPress = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.onSeekStart();\n\n      _this.updateTrackStepAndStyle(event);\n\n      _this.onSeekEnd();\n    };\n\n    _this.handleMeasure = function (name, _ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var _nativeEvent$layout = nativeEvent.layout,\n          width = _nativeEvent$layout.width,\n          height = _nativeEvent$layout.height;\n      var size = {\n        width: width,\n        height: height\n      };\n      var currentSize = _this[name];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      _this[name] = size;\n\n      if (_this.containerSize && _this.thumbSize && _this.trackSize) {\n        _this.setState({\n          containerSize: _this.containerSize,\n          trackSize: _this.trackSize,\n          thumbSize: _this.thumbSize\n        }, function () {\n          _this.setState({\n            measureCompleted: true\n          });\n        });\n      }\n    };\n\n    _this.onAccessibilityAction = function (event) {\n      var _this$props2 = _this.props,\n          maximumValue = _this$props2.maximumValue,\n          minimumValue = _this$props2.minimumValue,\n          step = _this$props2.step;\n\n      var value = _this.getValueForX(_this._x);\n\n      var newValue;\n\n      switch (event.nativeEvent.actionName) {\n        case 'increment':\n          newValue = value !== maximumValue ? value + step : value;\n          break;\n\n        case 'decrement':\n          newValue = value !== minimumValue ? value - step : value;\n          break;\n\n        default:\n          newValue = value;\n          break;\n      }\n\n      _this._x = _this.getXForValue(newValue);\n\n      _this.updateValue(_this._x);\n\n      _this.updateStyles(_this._x);\n\n      _.invoke(AccessibilityInfo, 'announceForAccessibility', \"New value \" + newValue);\n    };\n\n    _this.renderThumb = function () {\n      var _this$props3 = _this.props,\n          thumbStyle = _this$props3.thumbStyle,\n          disabled = _this$props3.disabled,\n          thumbTintColor = _this$props3.thumbTintColor,\n          thumbHitSlop = _this$props3.thumbHitSlop;\n      return _jsx(Animated.View, _objectSpread(_objectSpread({\n        hitSlop: thumbHitSlop,\n        ref: _this.setThumbRef,\n        onLayout: _this.onThumbLayout\n      }, _this._panResponder.panHandlers), {}, {\n        style: [styles.thumb, thumbStyle, {\n          backgroundColor: disabled ? DEFAULT_COLOR : thumbTintColor || ACTIVE_COLOR\n        }, {\n          transform: [{\n            scale: _this.state.thumbActiveAnimation\n          }]\n        }]\n      }));\n    };\n\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      thumbActiveAnimation: new Animated.Value(1),\n      measureCompleted: false\n    };\n\n    _this.checkProps(props);\n\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder,\n      onPanResponderGrant: _this.handlePanResponderGrant,\n      onPanResponderMove: _this.handlePanResponderMove,\n      onPanResponderRelease: _this.handlePanResponderEnd,\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n        return true;\n      },\n      onPanResponderEnd: function onPanResponderEnd() {\n        return true;\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n        return false;\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"checkProps\",\n    value: function checkProps(props) {\n      if (props.minimumValue >= props.maximumValue) {\n        console.warn('Slider minimumValue must be lower than maximumValue');\n      }\n\n      if (props.value < props.minimumValue || props.value > props.maximumValue) {\n        console.warn('Slider value is not in range');\n      }\n    }\n  }, {\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var disabled = this.props.disabled;\n      return _objectSpread({\n        accessibilityLabel: 'Slider',\n        accessible: true,\n        accessibilityRole: 'adjustable',\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityActions: [{\n          name: 'increment',\n          label: 'increment'\n        }, {\n          name: 'decrement',\n          label: 'decrement'\n        }]\n      }, extractAccessibilityProps(this.props));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.value !== this.props.value) {\n        this.initialValue = this.getRoundedValue(this.props.value);\n        this._x = this.getXForValue(this.initialValue);\n        this.updateStyles(this._x);\n      }\n\n      if (prevState.measureCompleted !== this.state.measureCompleted) {\n        this.initialThumbSize = this.state.thumbSize;\n        this._x = this.getXForValue(this.initialValue);\n        this.updateStyles(this._x);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"update\",\n    value: function update(dx) {\n      var x = this._x;\n      x += dx;\n      x = Math.max(Math.min(x, this.state.trackSize.width), 0);\n      this._x = x;\n      this.updateStyles(this._x);\n      this.updateValue(this._x);\n    }\n  }, {\n    key: \"bounceToStep\",\n    value: function bounceToStep() {\n      if (this.props.step > 0) {\n        var v = this.getValueForX(this._x);\n        var round = this.getRoundedValue(v);\n        var x = this.getXForValue(round);\n        this._x = x;\n        this.updateStyles(x);\n      }\n    }\n  }, {\n    key: \"updateStyles\",\n    value: function updateStyles(x) {\n      if (this.thumb) {\n        var trackSize = this.state.trackSize;\n        var position = x - this.initialThumbSize.width / 2;\n        var deviation = 3;\n\n        if (position + deviation < 0) {\n          this._thumbStyles.left = 0;\n        } else if (position - deviation > trackSize.width - this.initialThumbSize.width) {\n          this._thumbStyles.left = trackSize.width - this.initialThumbSize.width;\n        } else {\n          this._thumbStyles.left = position;\n        }\n\n        this.thumb.setNativeProps(this._thumbStyles);\n      }\n\n      if (this.minTrack) {\n        this._minTrackStyles.width = Math.min(this.state.trackSize.width, x);\n        this.minTrack.setNativeProps(this._minTrackStyles);\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(x) {\n      var value = this.getValueForX(x);\n      this.onValueChange(value);\n    }\n  }, {\n    key: \"updateThumbStyle\",\n    value: function updateThumbStyle(start) {\n      if (this.thumb && !this.props.disableActiveStyling) {\n        var _this$props4 = this.props,\n            thumbStyle = _this$props4.thumbStyle,\n            activeThumbStyle = _this$props4.activeThumbStyle;\n        var style = thumbStyle || styles.thumb;\n        var activeStyle = activeThumbStyle || styles.activeThumb;\n        var activeOrInactiveStyle = !this.props.disabled ? start ? activeStyle : style : {};\n        this._thumbStyles.style = _.omit(activeOrInactiveStyle, 'height', 'width');\n        this.thumb.setNativeProps(this._thumbStyles);\n        this.scaleThumb(start);\n      }\n    }\n  }, {\n    key: \"getRoundedValue\",\n    value: function getRoundedValue(value) {\n      var step = this.props.step;\n      var v = this.getValueInRange(value);\n      return step > 0 ? Math.round(v / step) * step : v;\n    }\n  }, {\n    key: \"getValueInRange\",\n    value: function getValueInRange(value) {\n      var _this$props5 = this.props,\n          minimumValue = _this$props5.minimumValue,\n          maximumValue = _this$props5.maximumValue;\n      var v = value < minimumValue ? minimumValue : value > maximumValue ? maximumValue : value;\n      return v;\n    }\n  }, {\n    key: \"getXForValue\",\n    value: function getXForValue(v) {\n      var minimumValue = this.props.minimumValue;\n      var range = this.getRange();\n      var relativeValue = minimumValue - v;\n      var value = minimumValue < 0 ? Math.abs(relativeValue) : v - minimumValue;\n      var ratio = value / range;\n      var x = ratio * this.state.trackSize.width;\n      return x;\n    }\n  }, {\n    key: \"getValueForX\",\n    value: function getValueForX(x) {\n      var _this$props6 = this.props,\n          maximumValue = _this$props6.maximumValue,\n          minimumValue = _this$props6.minimumValue,\n          step = _this$props6.step;\n      var ratio = x / (this.state.trackSize.width - this.initialThumbSize.width / 2);\n      var range = this.getRange();\n\n      if (step) {\n        return Math.max(minimumValue, Math.min(maximumValue, minimumValue + Math.round(ratio * range / step) * step));\n      } else {\n        return Math.max(minimumValue, Math.min(maximumValue, ratio * range + minimumValue));\n      }\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var _this$props7 = this.props,\n          minimumValue = _this$props7.minimumValue,\n          maximumValue = _this$props7.maximumValue;\n      var range = maximumValue - minimumValue;\n      return range;\n    }\n  }, {\n    key: \"onSeekStart\",\n    value: function onSeekStart() {\n      _.invoke(this.props, 'onSeekStart');\n    }\n  }, {\n    key: \"onSeekEnd\",\n    value: function onSeekEnd() {\n      _.invoke(this.props, 'onSeekEnd');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props8 = this.props,\n          containerStyle = _this$props8.containerStyle,\n          trackStyle = _this$props8.trackStyle,\n          renderTrack = _this$props8.renderTrack,\n          disabled = _this$props8.disabled,\n          _this$props8$minimumT = _this$props8.minimumTrackTintColor,\n          minimumTrackTintColor = _this$props8$minimumT === void 0 ? ACTIVE_COLOR : _this$props8$minimumT,\n          _this$props8$maximumT = _this$props8.maximumTrackTintColor,\n          maximumTrackTintColor = _this$props8$maximumT === void 0 ? DEFAULT_COLOR : _this$props8$maximumT,\n          testID = _this$props8.testID;\n      return _jsxs(View, _objectSpread(_objectSpread({\n        style: [styles.container, containerStyle],\n        onLayout: this.onContainerLayout,\n        onAccessibilityAction: this.onAccessibilityAction,\n        testID: testID\n      }, this.getAccessibilityProps()), {}, {\n        children: [_.isFunction(renderTrack) ? _jsx(View, {\n          style: [styles.track, {\n            backgroundColor: maximumTrackTintColor\n          }, trackStyle],\n          onLayout: this.onTrackLayout,\n          children: renderTrack()\n        }) : _jsxs(View, {\n          children: [_jsx(View, {\n            style: [styles.track, trackStyle, {\n              backgroundColor: disabled ? INACTIVE_COLOR : maximumTrackTintColor\n            }],\n            onLayout: this.onTrackLayout\n          }), _jsx(View, {\n            ref: this.setMinTrackRef,\n            style: [styles.track, trackStyle, styles.minimumTrack, {\n              backgroundColor: disabled ? DEFAULT_COLOR : minimumTrackTintColor\n            }]\n          })]\n        }), _jsx(View, {\n          style: styles.touchArea,\n          onTouchEnd: this.handleTrackPress\n        }), this.renderThumb()]\n      }));\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\nSlider.propTypes = {\n  value: _pt.number,\n  minimumValue: _pt.number,\n  maximumValue: _pt.number,\n  step: _pt.number,\n  minimumTrackTintColor: _pt.string,\n  maximumTrackTintColor: _pt.string,\n  renderTrack: _pt.func,\n  thumbTintColor: _pt.string,\n  onValueChange: _pt.func,\n  onSeekStart: _pt.func,\n  onSeekEnd: _pt.func,\n  disableActiveStyling: _pt.bool,\n  disabled: _pt.bool,\n  accessible: _pt.bool,\n  testID: _pt.string\n};\nSlider.displayName = 'Slider';\nSlider.defaultProps = defaultProps;\nexport { Slider as default };\nvar styles = StyleSheet.create({\n  container: {\n    height: THUMB_SIZE + SHADOW_RADIUS,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n    overflow: 'hidden'\n  },\n  minimumTrack: {\n    position: 'absolute'\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    borderWidth: BORDER_WIDTH,\n    borderColor: Colors.white,\n    shadowColor: Colors.rgba(Colors.black, 0.3),\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowOpacity: 0.9,\n    shadowRadius: SHADOW_RADIUS,\n    elevation: 2\n  },\n  activeThumb: {\n    width: THUMB_SIZE + 16,\n    height: THUMB_SIZE + 16,\n    borderRadius: (THUMB_SIZE + 16) / 2,\n    borderWidth: BORDER_WIDTH\n  },\n  touchArea: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'transparent'\n  })\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/node_modules/react-native-ui-lib/src/components/slider/index.js"],"names":["_pt","_","React","PureComponent","Constants","Colors","View","extractAccessibilityProps","TRACK_SIZE","THUMB_SIZE","BORDER_WIDTH","SHADOW_RADIUS","DEFAULT_COLOR","grey50","ACTIVE_COLOR","violet30","INACTIVE_COLOR","grey60","defaultProps","value","minimumValue","maximumValue","step","thumbHitSlop","top","bottom","left","right","Slider","props","thumb","undefined","_thumbStyles","minTrack","_minTrackStyles","_x","_dx","_thumbAnimationConstants","duration","defaultScaleFactor","initialValue","getRoundedValue","lastValue","initialThumbSize","width","height","handleMoveShouldSetPanResponder","handlePanResponderGrant","updateThumbStyle","onSeekStart","handlePanResponderMove","_e","gestureState","disabled","dx","isRTL","update","handlePanResponderEnd","bounceToStep","onSeekEnd","scaleThumb","start","scaleFactor","calculatedThumbActiveScale","thumbAnimationAction","toValue","thumbActiveAnimation","state","Animated","timing","useNativeDriver","setMinTrackRef","ref","setThumbRef","activeThumbStyle","thumbStyle","disableActiveStyling","scaleRatioFromSize","Number","updateTrackStepAndStyle","nativeEvent","locationX","updateValue","updateStyles","onOrientationChanged","setState","measureCompleted","onValueChange","invoke","onContainerLayout","handleMeasure","onTrackLayout","onThumbLayout","handleTrackPress","event","name","layout","size","currentSize","containerSize","thumbSize","trackSize","onAccessibilityAction","getValueForX","newValue","actionName","getXForValue","AccessibilityInfo","renderThumb","thumbTintColor","_panResponder","panHandlers","styles","backgroundColor","transform","scale","Value","checkProps","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onStartShouldSetPanResponder","onPanResponderEnd","onPanResponderTerminationRequest","console","warn","accessibilityLabel","accessible","accessibilityRole","accessibilityStates","accessibilityActions","label","prevProps","prevState","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","x","Math","max","min","v","round","position","deviation","setNativeProps","style","activeStyle","activeThumb","activeOrInactiveStyle","omit","getValueInRange","range","getRange","relativeValue","abs","ratio","containerStyle","trackStyle","renderTrack","minimumTrackTintColor","maximumTrackTintColor","testID","container","getAccessibilityProps","isFunction","track","minimumTrack","touchArea","propTypes","number","string","func","bool","displayName","StyleSheet","justifyContent","borderRadius","overflow","borderWidth","borderColor","white","shadowColor","rgba","black","shadowOffset","shadowOpacity","shadowRadius","elevation","absoluteFillObject"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, PanResponder, AccessibilityInfo, Animated } from 'react-native';\nimport { Constants } from \"../../commons/new\";\nimport { Colors } from \"../../style\";\nimport View from \"../view\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nconst TRACK_SIZE = 6;\nconst THUMB_SIZE = 24;\nconst BORDER_WIDTH = 6;\nconst SHADOW_RADIUS = 4;\nconst DEFAULT_COLOR = Colors.grey50;\nconst ACTIVE_COLOR = Colors.violet30;\nconst INACTIVE_COLOR = Colors.grey60;\nconst defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  thumbHitSlop: {\n    top: 10,\n    bottom: 10,\n    left: 24,\n    right: 24\n  }\n};\n/**\n * @description: A Slider component\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Slider/Slider.gif?raw=true\n */\n\nexport default class Slider extends PureComponent {\n  static propTypes = {\n    /**\n       * Initial value\n       */\n    value: _pt.number,\n\n    /**\n       * Minimum value\n       */\n    minimumValue: _pt.number,\n\n    /**\n       * Maximum value\n       */\n    maximumValue: _pt.number,\n\n    /**\n       * Step value of the slider. The value should be between 0 and (maximumValue - minimumValue)\n       */\n    step: _pt.number,\n\n    /**\n       * The color used for the track from minimum value to current value\n       */\n    minimumTrackTintColor: _pt.string,\n\n    /**\n       * The track color\n       */\n    maximumTrackTintColor: _pt.string,\n\n    /**\n       * Custom render instead of rendering the track\n       */\n    renderTrack: _pt.func,\n\n    /**\n       * Thumb color\n       */\n    thumbTintColor: _pt.string,\n\n    /**\n       * Callback for onValueChange\n       */\n    onValueChange: _pt.func,\n\n    /**\n       * Callback that notifies about slider seeking is started\n       */\n    onSeekStart: _pt.func,\n\n    /**\n       * Callback that notifies about slider seeking is finished\n       */\n    onSeekEnd: _pt.func,\n\n    /**\n       * If true the Slider will not change it's style on press\n       */\n    disableActiveStyling: _pt.bool,\n\n    /**\n       * If true the Slider will be disabled and will appear in disabled color\n       */\n    disabled: _pt.bool,\n\n    /**\n       * If true the component will have accessibility features enabled\n       */\n    accessible: _pt.bool,\n\n    /**\n       * The slider's test identifier\n       */\n    testID: _pt.string\n  };\n  static displayName = 'Slider';\n  static defaultProps = defaultProps;\n  thumb = undefined;\n  _thumbStyles = {};\n  minTrack = undefined;\n  _minTrackStyles = {};\n  _x = 0;\n  _dx = 0;\n  _thumbAnimationConstants = {\n    duration: 100,\n    defaultScaleFactor: 1.5\n  };\n  initialValue = this.getRoundedValue(this.props.value);\n  lastValue = this.initialValue;\n  initialThumbSize = {\n    width: THUMB_SIZE,\n    height: THUMB_SIZE\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      thumbActiveAnimation: new Animated.Value(1),\n      measureCompleted: false\n    };\n    this.checkProps(props);\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this.handlePanResponderGrant,\n      onPanResponderMove: this.handlePanResponderMove,\n      onPanResponderRelease: this.handlePanResponderEnd,\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderEnd: () => true,\n      onPanResponderTerminationRequest: () => false\n    });\n  }\n\n  checkProps(props) {\n    if (props.minimumValue >= props.maximumValue) {\n      console.warn('Slider minimumValue must be lower than maximumValue');\n    }\n\n    if (props.value < props.minimumValue || props.value > props.maximumValue) {\n      console.warn('Slider value is not in range');\n    }\n  }\n\n  getAccessibilityProps() {\n    const {\n      disabled\n    } = this.props;\n    return {\n      accessibilityLabel: 'Slider',\n      accessible: true,\n      accessibilityRole: 'adjustable',\n      accessibilityStates: disabled ? ['disabled'] : [],\n      accessibilityActions: [{\n        name: 'increment',\n        label: 'increment'\n      }, {\n        name: 'decrement',\n        label: 'decrement'\n      }],\n      ...extractAccessibilityProps(this.props)\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.value !== this.props.value) {\n      this.initialValue = this.getRoundedValue(this.props.value); // set position for new value\n\n      this._x = this.getXForValue(this.initialValue);\n      this.updateStyles(this._x);\n    }\n\n    if (prevState.measureCompleted !== this.state.measureCompleted) {\n      this.initialThumbSize = this.state.thumbSize; // for thumb enlargement\n      // set initial position\n\n      this._x = this.getXForValue(this.initialValue);\n      this.updateStyles(this._x);\n    }\n  }\n\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n  /* Gesture Recognizer */\n\n\n  handleMoveShouldSetPanResponder = () => {\n    return true;\n  };\n  handlePanResponderGrant = () => {\n    this.updateThumbStyle(true);\n    this._dx = 0;\n    this.onSeekStart();\n  };\n  handlePanResponderMove = (_e, gestureState) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const dx = gestureState.dx * (Constants.isRTL ? -1 : 1);\n    this.update(dx - this._dx);\n    this._dx = dx;\n  };\n  handlePanResponderEnd = () => {\n    this.updateThumbStyle(false);\n    this.bounceToStep();\n    this.onSeekEnd();\n  };\n  /* Actions */\n\n  update(dx) {\n    // calc x in range (instead of: this._x += dx)\n    let x = this._x;\n    x += dx;\n    x = Math.max(Math.min(x, this.state.trackSize.width), 0);\n    this._x = x;\n    this.updateStyles(this._x);\n    this.updateValue(this._x);\n  }\n\n  bounceToStep() {\n    if (this.props.step > 0) {\n      const v = this.getValueForX(this._x);\n      const round = this.getRoundedValue(v);\n      const x = this.getXForValue(round);\n      this._x = x;\n      this.updateStyles(x);\n    }\n  }\n\n  updateStyles(x) {\n    if (this.thumb) {\n      const {\n        trackSize\n      } = this.state;\n      const position = x - this.initialThumbSize.width / 2;\n      const deviation = 3;\n\n      if (position + deviation < 0) {\n        this._thumbStyles.left = 0;\n      } else if (position - deviation > trackSize.width - this.initialThumbSize.width) {\n        this._thumbStyles.left = trackSize.width - this.initialThumbSize.width;\n      } else {\n        this._thumbStyles.left = position;\n      }\n\n      this.thumb.setNativeProps(this._thumbStyles);\n    }\n\n    if (this.minTrack) {\n      this._minTrackStyles.width = Math.min(this.state.trackSize.width, x);\n      this.minTrack.setNativeProps(this._minTrackStyles);\n    }\n  }\n\n  updateValue(x) {\n    const value = this.getValueForX(x);\n    this.onValueChange(value);\n  }\n\n  updateThumbStyle(start) {\n    if (this.thumb && !this.props.disableActiveStyling) {\n      const {\n        thumbStyle,\n        activeThumbStyle\n      } = this.props;\n      const style = thumbStyle || styles.thumb;\n      const activeStyle = activeThumbStyle || styles.activeThumb;\n      const activeOrInactiveStyle = !this.props.disabled ? start ? activeStyle : style : {};\n      this._thumbStyles.style = _.omit(activeOrInactiveStyle, 'height', 'width');\n      this.thumb.setNativeProps(this._thumbStyles);\n      this.scaleThumb(start);\n    }\n  }\n\n  scaleThumb = start => {\n    const scaleFactor = start ? this.calculatedThumbActiveScale() : 1;\n    this.thumbAnimationAction(scaleFactor);\n  };\n  thumbAnimationAction = toValue => {\n    const {\n      thumbActiveAnimation\n    } = this.state;\n    const {\n      duration\n    } = this._thumbAnimationConstants;\n    Animated.timing(thumbActiveAnimation, {\n      toValue,\n      duration,\n      useNativeDriver: true\n    }).start();\n  };\n\n  getRoundedValue(value) {\n    const {\n      step\n    } = this.props;\n    const v = this.getValueInRange(value);\n    return step > 0 ? Math.round(v / step) * step : v;\n  }\n\n  getValueInRange(value) {\n    const {\n      minimumValue,\n      maximumValue\n    } = this.props;\n    const v = value < minimumValue ? minimumValue : value > maximumValue ? maximumValue : value;\n    return v;\n  }\n\n  getXForValue(v) {\n    const {\n      minimumValue\n    } = this.props;\n    const range = this.getRange();\n    const relativeValue = minimumValue - v;\n    const value = minimumValue < 0 ? Math.abs(relativeValue) : v - minimumValue; // for negatives\n\n    const ratio = value / range;\n    const x = ratio * this.state.trackSize.width;\n    return x;\n  }\n\n  getValueForX(x) {\n    const {\n      maximumValue,\n      minimumValue,\n      step\n    } = this.props;\n    const ratio = x / (this.state.trackSize.width - this.initialThumbSize.width / 2);\n    const range = this.getRange();\n\n    if (step) {\n      return Math.max(minimumValue, Math.min(maximumValue, minimumValue + Math.round(ratio * range / step) * step));\n    } else {\n      return Math.max(minimumValue, Math.min(maximumValue, ratio * range + minimumValue));\n    }\n  }\n\n  getRange() {\n    const {\n      minimumValue,\n      maximumValue\n    } = this.props;\n    const range = maximumValue - minimumValue;\n    return range;\n  }\n\n  setMinTrackRef = ref => {\n    this.minTrack = ref;\n  };\n  setThumbRef = ref => {\n    this.thumb = ref;\n  };\n  calculatedThumbActiveScale = () => {\n    const {\n      activeThumbStyle,\n      thumbStyle,\n      disabled,\n      disableActiveStyling\n    } = this.props;\n\n    if (disabled || disableActiveStyling) {\n      return 1;\n    }\n\n    const {\n      defaultScaleFactor\n    } = this._thumbAnimationConstants;\n\n    if (!activeThumbStyle || !thumbStyle) {\n      return defaultScaleFactor;\n    }\n\n    const scaleRatioFromSize = Number(activeThumbStyle.height) / Number(thumbStyle.height);\n    return scaleRatioFromSize || defaultScaleFactor;\n  };\n  updateTrackStepAndStyle = ({\n    nativeEvent\n  }) => {\n    this._x = nativeEvent.locationX;\n    this.updateValue(this._x);\n\n    if (this.props.step > 0) {\n      this.bounceToStep();\n    } else {\n      this.updateStyles(this._x);\n    }\n  };\n  onOrientationChanged = () => {\n    this.initialValue = this.lastValue;\n    this.setState({\n      measureCompleted: false\n    });\n  };\n  /* Events */\n\n  onValueChange = value => {\n    this.lastValue = value;\n\n    _.invoke(this.props, 'onValueChange', value);\n  };\n\n  onSeekStart() {\n    _.invoke(this.props, 'onSeekStart');\n  }\n\n  onSeekEnd() {\n    _.invoke(this.props, 'onSeekEnd');\n  }\n\n  onContainerLayout = nativeEvent => {\n    this.handleMeasure('containerSize', nativeEvent);\n  };\n  onTrackLayout = nativeEvent => {\n    this.setState({\n      measureCompleted: false\n    });\n    this.handleMeasure('trackSize', nativeEvent);\n  };\n  onThumbLayout = nativeEvent => {\n    this.handleMeasure('thumbSize', nativeEvent);\n  };\n  handleTrackPress = event => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.onSeekStart();\n    this.updateTrackStepAndStyle(event);\n    this.onSeekEnd();\n  };\n  handleMeasure = (name, {\n    nativeEvent\n  }) => {\n    const {\n      width,\n      height\n    } = nativeEvent.layout;\n    const size = {\n      width,\n      height\n    };\n    const currentSize = this[name];\n\n    if (currentSize && width === currentSize.width && height === currentSize.height) {\n      return;\n    }\n\n    this[name] = size;\n\n    if (this.containerSize && this.thumbSize && this.trackSize) {\n      // console.warn('post return');\n      this.setState({\n        containerSize: this.containerSize,\n        trackSize: this.trackSize,\n        thumbSize: this.thumbSize\n      }, () => {\n        this.setState({\n          measureCompleted: true\n        });\n      });\n    }\n  };\n  onAccessibilityAction = event => {\n    const {\n      maximumValue,\n      minimumValue,\n      step\n    } = this.props;\n    const value = this.getValueForX(this._x);\n    let newValue;\n\n    switch (event.nativeEvent.actionName) {\n      case 'increment':\n        newValue = value !== maximumValue ? value + step : value;\n        break;\n\n      case 'decrement':\n        newValue = value !== minimumValue ? value - step : value;\n        break;\n\n      default:\n        newValue = value;\n        break;\n    }\n\n    this._x = this.getXForValue(newValue);\n    this.updateValue(this._x);\n    this.updateStyles(this._x);\n\n    _.invoke(AccessibilityInfo, 'announceForAccessibility', `New value ${newValue}`);\n  };\n  /* Renders */\n\n  renderThumb = () => {\n    const {\n      thumbStyle,\n      disabled,\n      thumbTintColor,\n      thumbHitSlop\n    } = this.props;\n    return <Animated.View hitSlop={thumbHitSlop} ref={this.setThumbRef} onLayout={this.onThumbLayout} {...this._panResponder.panHandlers} style={[styles.thumb, thumbStyle, {\n      backgroundColor: disabled ? DEFAULT_COLOR : thumbTintColor || ACTIVE_COLOR\n    }, {\n      transform: [{\n        scale: this.state.thumbActiveAnimation\n      }]\n    }]} />;\n  };\n\n  render() {\n    const {\n      containerStyle,\n      trackStyle,\n      renderTrack,\n      disabled,\n      minimumTrackTintColor = ACTIVE_COLOR,\n      maximumTrackTintColor = DEFAULT_COLOR,\n      testID\n    } = this.props;\n    return <View style={[styles.container, containerStyle]} onLayout={this.onContainerLayout} onAccessibilityAction={this.onAccessibilityAction} testID={testID} {...this.getAccessibilityProps()}>\n        {_.isFunction(renderTrack) ? <View style={[styles.track, {\n        backgroundColor: maximumTrackTintColor\n      }, trackStyle]} onLayout={this.onTrackLayout}>\n            {renderTrack()}\n          </View> : <View>\n            <View style={[styles.track, trackStyle, {\n          backgroundColor: disabled ? INACTIVE_COLOR : maximumTrackTintColor\n        }]} onLayout={this.onTrackLayout} />\n            <View ref={this.setMinTrackRef} style={[styles.track, trackStyle, styles.minimumTrack, {\n          backgroundColor: disabled ? DEFAULT_COLOR : minimumTrackTintColor\n        }]} />\n          </View>}\n\n        <View style={styles.touchArea} onTouchEnd={this.handleTrackPress} />\n        {this.renderThumb()}\n      </View>;\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    height: THUMB_SIZE + SHADOW_RADIUS,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n    overflow: 'hidden'\n  },\n  minimumTrack: {\n    position: 'absolute'\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    borderWidth: BORDER_WIDTH,\n    borderColor: Colors.white,\n    shadowColor: Colors.rgba(Colors.black, 0.3),\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowOpacity: 0.9,\n    shadowRadius: SHADOW_RADIUS,\n    elevation: 2\n  },\n  activeThumb: {\n    width: THUMB_SIZE + 16,\n    height: THUMB_SIZE + 16,\n    borderRadius: (THUMB_SIZE + 16) / 2,\n    borderWidth: BORDER_WIDTH\n  },\n  touchArea: { ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'transparent'\n  }\n});"]},"metadata":{},"sourceType":"module"}