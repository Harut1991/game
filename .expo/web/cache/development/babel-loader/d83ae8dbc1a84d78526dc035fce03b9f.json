{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport memoize from 'memoize-one';\nimport { Constants, asBaseComponent, forwardRef } from \"../../commons\";\nimport { LogService } from \"../../services\";\nimport Modal from \"../modal\";\nimport ExpandableOverlay from \"../../incubator/expandableOverlay\";\nimport { TextField } from \"../inputs\";\nimport NativePicker from \"./NativePicker\";\nimport PickerModal from \"./PickerModal\";\nimport PickerItem from \"./PickerItem\";\nimport PickerContext from \"./PickerContext\";\nimport { getItemLabel as getItemLabelPresenter, shouldFilterOut } from \"./PickerPresenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\nvar ItemType = PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.shape({\n  value: PropTypes.any,\n  label: PropTypes.string\n})]);\n\nvar Picker = function (_Component) {\n  _inherits(Picker, _Component);\n\n  var _super = _createSuper(Picker);\n\n  function Picker(props) {\n    var _this;\n\n    _classCallCheck(this, Picker);\n\n    _this = _super.call(this, props);\n    _this.pickerExpandable = React.createRef();\n\n    _this.getContextValue = function () {\n      var multiDraftValue = _this.state.multiDraftValue;\n      var _this$props = _this.props,\n          migrate = _this$props.migrate,\n          mode = _this$props.mode,\n          getItemValue = _this$props.getItemValue,\n          getItemLabel = _this$props.getItemLabel,\n          renderItem = _this$props.renderItem,\n          selectionLimit = _this$props.selectionLimit,\n          value = _this$props.value;\n      var pickerValue = !migrate && _.isPlainObject(value) ? value == null ? void 0 : value.value : value;\n      return {\n        migrate: migrate,\n        value: mode === Picker.modes.MULTI ? multiDraftValue : pickerValue,\n        onPress: mode === Picker.modes.MULTI ? _this.toggleItemSelection : _this.onDoneSelecting,\n        isMultiMode: mode === Picker.modes.MULTI,\n        getItemValue: getItemValue,\n        getItemLabel: getItemLabel,\n        onSelectedLayout: _this.onSelectedItemLayout,\n        renderItem: renderItem,\n        selectionLimit: selectionLimit\n      };\n    };\n\n    _this.getLabelValueText = function () {\n      var value = _this.props.value;\n      return _this.getLabel(value);\n    };\n\n    _this.getLabelsFromArray = function (value) {\n      var items = _this.state.items;\n\n      var itemsByValue = _.keyBy(items, 'value');\n\n      var _this$props$getItemLa = _this.props.getItemLabel,\n          getItemLabel = _this$props$getItemLa === void 0 ? _.noop : _this$props$getItemLa;\n      return _.chain(value).map(function (item) {\n        var _itemsByValue$item;\n\n        return _.isPlainObject(item) ? getItemLabel(item) || (item == null ? void 0 : item.label) : (_itemsByValue$item = itemsByValue[item]) == null ? void 0 : _itemsByValue$item.label;\n      }).join(', ').value();\n    };\n\n    _this.getLabel = function (value) {\n      var getLabel = _this.props.getLabel;\n\n      if (_.isFunction(getLabel) && !_.isUndefined(getLabel(value))) {\n        return getLabel(value);\n      }\n\n      if (_.isArray(value)) {\n        return _this.getLabelsFromArray(value);\n      }\n\n      if (_.isPlainObject(value)) {\n        return _.get(value, 'label');\n      }\n\n      var items = _this.state.items;\n\n      var selectedItem = _.find(items, {\n        value: value\n      });\n\n      return _.get(selectedItem, 'label');\n    };\n\n    _this.getFilteredChildren = memoize(function (children, searchValue) {\n      var getItemLabelPicker = _this.props.getItemLabel;\n      return _.filter(children, function (child) {\n        var _child$props = child.props,\n            label = _child$props.label,\n            value = _child$props.value,\n            getItemLabel = _child$props.getItemLabel;\n        var itemLabel = getItemLabelPresenter(label, value, getItemLabel || getItemLabelPicker);\n        return !shouldFilterOut(searchValue, itemLabel);\n      });\n    });\n\n    _this.toggleItemSelection = function (item) {\n      var _this$props2 = _this.props,\n          getItemValue = _this$props2.getItemValue,\n          migrate = _this$props2.migrate;\n      var multiDraftValue = _this.state.multiDraftValue;\n      var newValue;\n\n      if (!migrate) {\n        newValue = _.xorBy(multiDraftValue, [item], getItemValue || 'value');\n      } else {\n        newValue = _.xor(multiDraftValue, [item]);\n      }\n\n      _this.setState({\n        multiDraftValue: newValue\n      });\n    };\n\n    _this.cancelSelect = function () {\n      var _this$pickerExpandabl, _this$props$topBarPro;\n\n      _this.setState({\n        multiDraftValue: _this.state.multiFinalValue\n      });\n\n      (_this$pickerExpandabl = _this.pickerExpandable.current) == null ? void 0 : _this$pickerExpandabl.closeExpandable == null ? void 0 : _this$pickerExpandabl.closeExpandable();\n      (_this$props$topBarPro = _this.props.topBarProps) == null ? void 0 : _this$props$topBarPro.onCancel == null ? void 0 : _this$props$topBarPro.onCancel();\n    };\n\n    _this.onDoneSelecting = function (item) {\n      var _this$pickerExpandabl2;\n\n      _this.clearSearchField();\n\n      _this.setState({\n        multiFinalValue: item\n      });\n\n      (_this$pickerExpandabl2 = _this.pickerExpandable.current) == null ? void 0 : _this$pickerExpandabl2.closeExpandable == null ? void 0 : _this$pickerExpandabl2.closeExpandable();\n      _this.props.onChange == null ? void 0 : _this.props.onChange(item);\n    };\n\n    _this.onSearchChange = function (searchValue) {\n      _this.setState({\n        searchValue: searchValue\n      });\n\n      _.invoke(_this.props, 'onSearchChange', searchValue);\n    };\n\n    _this.onSelectedItemLayout = function (_ref) {\n      var y = _ref.nativeEvent.layout.y;\n\n      _this.setState({\n        selectedItemPosition: y\n      });\n    };\n\n    _this.clearSearchField = function () {\n      _this.setState({\n        searchValue: ''\n      });\n    };\n\n    _this.renderCustomModal = function (_ref2) {\n      var visible = _ref2.visible,\n          toggleExpandable = _ref2.toggleExpandable;\n      var _this$props3 = _this.props,\n          renderCustomModal = _this$props3.renderCustomModal,\n          children = _this$props3.children;\n      var multiDraftValue = _this.state.multiDraftValue;\n\n      if (renderCustomModal) {\n        var modalProps = {\n          visible: visible,\n          toggleModal: toggleExpandable,\n          onSearchChange: _this.onSearchChange,\n          children: children,\n          onDone: function onDone() {\n            return _this.onDoneSelecting(multiDraftValue);\n          },\n          onCancel: _this.cancelSelect\n        };\n        return renderCustomModal(modalProps);\n      }\n    };\n\n    _this.renderExpandableModal = function () {\n      var _this$props4 = _this.props,\n          mode = _this$props4.mode,\n          enableModalBlur = _this$props4.enableModalBlur,\n          topBarProps = _this$props4.topBarProps,\n          showSearch = _this$props4.showSearch,\n          onShow = _this$props4.onShow,\n          searchStyle = _this$props4.searchStyle,\n          searchPlaceholder = _this$props4.searchPlaceholder,\n          renderCustomSearch = _this$props4.renderCustomSearch,\n          listProps = _this$props4.listProps,\n          testID = _this$props4.testID,\n          pickerModalProps = _this$props4.pickerModalProps;\n      var _this$state = _this.state,\n          showExpandableModal = _this$state.showExpandableModal,\n          selectedItemPosition = _this$state.selectedItemPosition,\n          multiDraftValue = _this$state.multiDraftValue;\n      return _jsx(PickerModal, {\n        testID: testID + \".modal\",\n        visible: showExpandableModal,\n        scrollPosition: selectedItemPosition,\n        enableModalBlur: enableModalBlur,\n        topBarProps: _objectSpread(_objectSpread({}, topBarProps), {}, {\n          onCancel: _this.cancelSelect,\n          onDone: mode === Picker.modes.MULTI ? function () {\n            return _this.onDoneSelecting(multiDraftValue);\n          } : undefined\n        }),\n        showSearch: showSearch,\n        searchStyle: searchStyle,\n        searchPlaceholder: searchPlaceholder,\n        onSearchChange: _this.onSearchChange,\n        renderCustomSearch: renderCustomSearch,\n        listProps: listProps,\n        onShow: onShow,\n        pickerModalProps: pickerModalProps,\n        children: _this.children\n      });\n    };\n\n    _this.state = {\n      selectedItemPosition: 0,\n      items: Picker.extractPickerItems(props),\n      multiDraftValue: props.value,\n      multiFinalValue: props.value\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      LogService.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      LogService.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    if (_.isPlainObject(props.value)) {\n      LogService.warn('UILib Picker will stop supporting passing object as value in the next major version. Please use either string or a number as value');\n    }\n\n    return _this;\n  }\n\n  _createClass(Picker, [{\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var placeholder = this.props.placeholder;\n      return {\n        accessibilityLabel: this.getLabelValueText() ? placeholder + \". selected. \" + this.getLabelValueText() : \"Select \" + placeholder,\n        accessibilityHint: this.getLabelValueText() ? 'Double tap to edit' : \"Goes to \" + placeholder + \". Suggestions will be provided\"\n      };\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var searchValue = this.state.searchValue;\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          showSearch = _this$props5.showSearch;\n\n      if (showSearch && !_.isEmpty(searchValue)) {\n        return this.getFilteredChildren(children, searchValue);\n      }\n\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          useNativePicker = _this$props6.useNativePicker,\n          renderPicker = _this$props6.renderPicker,\n          customPickerProps = _this$props6.customPickerProps,\n          containerStyle = _this$props6.containerStyle,\n          testID = _this$props6.testID,\n          onShow = _this$props6.onShow,\n          renderCustomModal = _this$props6.renderCustomModal,\n          forwardedRef = _this$props6.forwardedRef,\n          modifiers = _this$props6.modifiers,\n          enableModalBlur = _this$props6.enableModalBlur,\n          topBarProps = _this$props6.topBarProps,\n          pickerModalProps = _this$props6.pickerModalProps,\n          value = _this$props6.value,\n          editable = _this$props6.editable;\n\n      if (useNativePicker) {\n        return _jsx(NativePicker, _objectSpread({}, this.props));\n      }\n\n      var textInputProps = TextField.extractOwnProps(this.props);\n      var label = this.getLabelValueText();\n      var paddings = modifiers.paddings,\n          margins = modifiers.margins,\n          positionStyle = modifiers.positionStyle;\n\n      var modalProps = _objectSpread({\n        animationType: 'slide',\n        transparent: Constants.isIOS && enableModalBlur,\n        enableModalBlur: Constants.isIOS && enableModalBlur,\n        onRequestClose: topBarProps == null ? void 0 : topBarProps.onCancel,\n        onShow: onShow\n      }, pickerModalProps);\n\n      return _jsx(PickerContext.Provider, {\n        value: this.getContextValue(),\n        children: _jsx(ExpandableOverlay, _objectSpread(_objectSpread({\n          ref: this.pickerExpandable,\n          modalProps: modalProps,\n          expandableContent: this.renderExpandableModal(),\n          renderCustomOverlay: renderCustomModal ? this.renderCustomModal : undefined,\n          testID: testID\n        }, customPickerProps), {}, {\n          disabled: editable === false,\n          children: renderPicker ? renderPicker(value, this.getLabel(value)) : _jsx(TextField, _objectSpread(_objectSpread(_objectSpread({\n            ref: forwardedRef\n          }, textInputProps), {}, {\n            testID: testID + \".input\",\n            containerStyle: [paddings, margins, positionStyle, containerStyle]\n          }, this.getAccessibilityInfo()), {}, {\n            importantForAccessibility: 'no-hide-descendants',\n            value: label,\n            selection: Constants.isAndroid ? {\n              start: 0\n            } : undefined,\n            expandable: false,\n            renderExpandable: _.noop,\n            onToggleExpandableModal: _.noop\n          }))\n        }))\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.mode === Picker.modes.MULTI) {\n        if (prevState.multiFinalValue !== nextProps.value) {\n          return {\n            multiDraftValue: nextProps.value,\n            multiFinalValue: nextProps.value\n          };\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"extractPickerItems\",\n    value: function extractPickerItems(props) {\n      var children = props.children;\n      var items = React.Children.map(children, function (child) {\n        return {\n          value: child.props.value,\n          label: child.props.label\n        };\n      });\n      return items;\n    }\n  }]);\n\n  return Picker;\n}(Component);\n\nPicker.displayName = 'Picker';\nPicker.propTypes = _objectSpread(_objectSpread({\n  migrate: PropTypes.bool\n}, TextField.propTypes), {}, {\n  value: PropTypes.oneOfType([ItemType, PropTypes.arrayOf(ItemType), PropTypes.object, PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  mode: PropTypes.oneOf(Object.keys(PICKER_MODES)),\n  selectionLimit: PropTypes.number,\n  enableModalBlur: PropTypes.bool,\n  renderPicker: PropTypes.elementType,\n  renderItem: PropTypes.elementType,\n  renderCustomModal: PropTypes.elementType,\n  customPickerProps: PropTypes.object,\n  onPress: PropTypes.func,\n  getItemValue: PropTypes.func,\n  getItemLabel: PropTypes.func,\n  getLabel: PropTypes.func,\n  topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n  showSearch: PropTypes.bool,\n  searchStyle: PropTypes.shape({\n    color: PropTypes.string,\n    placeholderTextColor: PropTypes.string,\n    selectionColor: PropTypes.string\n  }),\n  searchPlaceholder: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  renderCustomSearch: PropTypes.elementType,\n  useNativePicker: PropTypes.bool,\n  renderNativePicker: PropTypes.elementType,\n  listProps: PropTypes.object,\n  pickerModalProps: PropTypes.object\n});\nPicker.defaultProps = _objectSpread(_objectSpread({}, TextField.defaultProps), {}, {\n  mode: PICKER_MODES.SINGLE\n});\nPicker.modes = PICKER_MODES;\nPicker.Item = PickerItem;\nexport { Picker };\nexport default asBaseComponent(forwardRef(Picker));","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/node_modules/react-native-ui-lib/src/components/picker/index.js"],"names":["_","PropTypes","React","Component","memoize","Constants","asBaseComponent","forwardRef","LogService","Modal","ExpandableOverlay","TextField","NativePicker","PickerModal","PickerItem","PickerContext","getItemLabel","getItemLabelPresenter","shouldFilterOut","PICKER_MODES","SINGLE","MULTI","ItemType","oneOfType","number","string","shape","value","any","label","Picker","props","pickerExpandable","createRef","getContextValue","multiDraftValue","state","migrate","mode","getItemValue","renderItem","selectionLimit","pickerValue","isPlainObject","modes","onPress","toggleItemSelection","onDoneSelecting","isMultiMode","onSelectedLayout","onSelectedItemLayout","getLabelValueText","getLabel","getLabelsFromArray","items","itemsByValue","keyBy","noop","chain","map","item","join","isFunction","isUndefined","isArray","get","selectedItem","find","getFilteredChildren","children","searchValue","getItemLabelPicker","filter","child","itemLabel","newValue","xorBy","xor","setState","cancelSelect","multiFinalValue","current","closeExpandable","topBarProps","onCancel","clearSearchField","onChange","onSearchChange","invoke","y","nativeEvent","layout","selectedItemPosition","renderCustomModal","visible","toggleExpandable","modalProps","toggleModal","onDone","renderExpandableModal","enableModalBlur","showSearch","onShow","searchStyle","searchPlaceholder","renderCustomSearch","listProps","testID","pickerModalProps","showExpandableModal","undefined","extractPickerItems","Array","warn","placeholder","accessibilityLabel","accessibilityHint","isEmpty","useNativePicker","renderPicker","customPickerProps","containerStyle","forwardedRef","modifiers","editable","textInputProps","extractOwnProps","paddings","margins","positionStyle","animationType","transparent","isIOS","onRequestClose","getAccessibilityInfo","isAndroid","start","nextProps","prevState","Children","displayName","propTypes","bool","arrayOf","object","func","oneOf","Object","keys","elementType","TopBar","color","placeholderTextColor","selectionColor","renderNativePicker","defaultProps","Item"],"mappings":"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","sourcesContent":["// TODO: deprecate all places where we check if _.isPlainObject\n// TODO: deprecate getItemValue prop\n// TODO: deprecate getItemLabel prop\n// TODO: Add initialValue prop\n// TODO: consider deprecating renderCustomModal prop\n// TODO: deprecate onShow cause it's already supported by passing it in pickerModalProps\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport memoize from 'memoize-one';\nimport {Constants, asBaseComponent, forwardRef} from '../../commons';\nimport {LogService} from '../../services';\n// import View from '../../components/view';\nimport Modal from '../modal';\nimport ExpandableOverlay from '../../incubator/expandableOverlay';\n// import Button from '../../components/button';\nimport {TextField} from '../inputs';\nimport NativePicker from './NativePicker';\nimport PickerModal from './PickerModal';\nimport PickerItem from './PickerItem';\nimport PickerContext from './PickerContext';\nimport {getItemLabel as getItemLabelPresenter, shouldFilterOut} from './PickerPresenter';\n\nconst PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\nconst ItemType = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.shape({\n    value: PropTypes.any,\n    label: PropTypes.string\n  })\n]);\n\n/**\n * @description: Picker Component, support single or multiple selection, blurModel and native wheel picker\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/MultiPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/NativePicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/DialogPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/CustomPicker.gif?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js\n */\nclass Picker extends Component {\n  static displayName = 'Picker';\n  static propTypes = {\n    /**\n     * Temporary prop required for migration to Picker's new API\n     */\n    migrate: PropTypes.bool,\n    ...TextField.propTypes,\n    /**\n     * Picker current value in the shape of {value: ..., label: ...}, for custom shape use 'getItemValue' prop\n     */\n    value: PropTypes.oneOfType([\n      ItemType,\n      PropTypes.arrayOf(ItemType),\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Callback for when picker value change\n     */\n    onChange: PropTypes.func,\n    /**\n     * SINGLE mode or MULTI mode\n     */\n    mode: PropTypes.oneOf(Object.keys(PICKER_MODES)),\n    /**\n     * Limit the number of selected items\n     */\n    selectionLimit: PropTypes.number,\n    /**\n     * Adds blur effect to picker modal (iOS only)\n     */\n    enableModalBlur: PropTypes.bool,\n    /**\n     * Render custom picker - input will be value (see above)\n     * Example:\n     * renderPicker = (selectedItem) => {...}\n     */\n    renderPicker: PropTypes.elementType,\n    /**\n     * Render custom picker item\n     */\n    renderItem: PropTypes.elementType,\n    /**\n     * Render custom picker modal (e.g ({visible, children, toggleModal}) => {...})\n     */\n    renderCustomModal: PropTypes.elementType,\n    /**\n     * Custom picker props (when using renderPicker, will apply on the button wrapper)\n     */\n    customPickerProps: PropTypes.object,\n    /**\n     * Add onPress callback for when pressing the picker\n     */\n    onPress: PropTypes.func,\n    /**\n     * @deprecated\n     * A function that extract the unique value out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})\n     */\n    getItemValue: PropTypes.func,\n    /**\n     * @deprecated\n     * A function that extract the label out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})\n     */\n    getItemLabel: PropTypes.func,\n    /**\n     * A function that returns the label to show for the selected Picker value\n     */\n    getLabel: PropTypes.func,\n    /**\n     * The picker modal top bar props\n     */\n    topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n    /**\n     * Show search input to filter picker items by label\n     */\n    showSearch: PropTypes.bool,\n    /**\n     * Style object for the search input (only when passing showSearch)\n     */\n    searchStyle: PropTypes.shape({\n      color: PropTypes.string,\n      placeholderTextColor: PropTypes.string,\n      selectionColor: PropTypes.string\n    }),\n    /**\n     * Placeholder text for the search input (only when passing showSearch)\n     */\n    searchPlaceholder: PropTypes.string,\n    /**\n     * callback for picker modal search input text change (only when passing showSearch)\n     */\n    onSearchChange: PropTypes.func,\n    /**\n     * Render custom search input (only when passing showSearch)\n     */\n    renderCustomSearch: PropTypes.elementType,\n    /**\n     * Allow to use the native picker solution (different style for iOS and Android)\n     */\n    useNativePicker: PropTypes.bool,\n    /**\n     * Callback for rendering a custom native picker inside the dialog (relevant to native picker only)\n     */\n    renderNativePicker: PropTypes.elementType,\n    /**\n     * Pass props to the list component that wraps the picker options (allows to control FlatList behavior)\n     */\n    listProps: PropTypes.object,\n    /**\n     * Pass props to the picker modal\n     */\n    pickerModalProps: PropTypes.object\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    mode: PICKER_MODES.SINGLE\n  };\n\n  static modes = PICKER_MODES;\n\n  pickerExpandable = React.createRef();\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedItemPosition: 0,\n      items: Picker.extractPickerItems(props),\n      multiDraftValue: props.value,\n      multiFinalValue: props.value\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      LogService.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      LogService.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    // TODO: this warning should be replaced by the opposite\n    // we should warn user NOT to pass an object to the value prop\n    // if (props.useNativePicker && _.isPlainObject(props.value)) {\n    //   console.warn('UILib Picker: don\\'t use object as value for native picker, use either string or a number');\n    // }\n    if (_.isPlainObject(props.value)) {\n      LogService.warn('UILib Picker will stop supporting passing object as value in the next major version. Please use either string or a number as value');\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.mode === Picker.modes.MULTI) {\n      if (prevState.multiFinalValue !== nextProps.value) {\n        return {multiDraftValue: nextProps.value, multiFinalValue: nextProps.value};\n      }\n    }\n    return null;\n  }\n\n  static extractPickerItems(props) {\n    const {children} = props;\n    const items = React.Children.map(children, child => ({value: child.props.value, label: child.props.label}));\n    return items;\n  }\n\n  getAccessibilityInfo() {\n    const {placeholder} = this.props;\n\n    return {\n      accessibilityLabel: this.getLabelValueText()\n        ? `${placeholder}. selected. ${this.getLabelValueText()}`\n        : `Select ${placeholder}`,\n      accessibilityHint: this.getLabelValueText()\n        ? 'Double tap to edit'\n        : `Goes to ${placeholder}. Suggestions will be provided`\n    };\n  }\n\n  getContextValue = () => {\n    const {multiDraftValue} = this.state;\n    const {migrate, mode, getItemValue, getItemLabel, renderItem, selectionLimit, value} = this.props;\n    const pickerValue = !migrate && _.isPlainObject(value) ? value?.value : value;\n    return {\n      migrate,\n      value: mode === Picker.modes.MULTI ? multiDraftValue : pickerValue,\n      onPress: mode === Picker.modes.MULTI ? this.toggleItemSelection : this.onDoneSelecting,\n      isMultiMode: mode === Picker.modes.MULTI,\n      getItemValue,\n      getItemLabel,\n      onSelectedLayout: this.onSelectedItemLayout,\n      renderItem,\n      selectionLimit\n    };\n  };\n\n  getLabelValueText = () => {\n    const {value} = this.props;\n    return this.getLabel(value);\n  };\n\n  getLabelsFromArray = value => {\n    const {items} = this.state;\n    const itemsByValue = _.keyBy(items, 'value');\n\n    const {getItemLabel = _.noop} = this.props;\n    return _.chain(value)\n      .map(item => (_.isPlainObject(item) ? getItemLabel(item) || item?.label : itemsByValue[item]?.label))\n      .join(', ')\n      .value();\n  };\n\n  getLabel = value => {\n    const {getLabel} = this.props;\n\n    if (_.isFunction(getLabel) && !_.isUndefined(getLabel(value))) {\n      return getLabel(value);\n    }\n\n    if (_.isArray(value)) {\n      return this.getLabelsFromArray(value);\n    }\n\n    if (_.isPlainObject(value)) {\n      return _.get(value, 'label');\n    }\n\n    // otherwise, extract from picker items\n    const {items} = this.state;\n    const selectedItem = _.find(items, {value});\n\n    return _.get(selectedItem, 'label');\n  };\n\n  getFilteredChildren = memoize((children, searchValue) => {\n    const {getItemLabel: getItemLabelPicker} = this.props;\n    return _.filter(children, child => {\n      const {label, value, getItemLabel} = child.props;\n      const itemLabel = getItemLabelPresenter(label, value, getItemLabel || getItemLabelPicker);\n      return !shouldFilterOut(searchValue, itemLabel);\n    });\n  });\n\n  get children() {\n    const {searchValue} = this.state;\n    const {children, showSearch} = this.props;\n    if (showSearch && !_.isEmpty(searchValue)) {\n      return this.getFilteredChildren(children, searchValue);\n    }\n\n    return children;\n  }\n\n  // handlePickerOnPress = () => {\n  //   this.toggleExpandableModal(true);\n  //   _.invoke(this.props, 'onPress');\n  // };\n\n  // toggleExpandableModal = value => {\n  //   this.setState({showExpandableModal: value});\n  //   this.clearSearchField();\n  // };\n\n  toggleItemSelection = item => {\n    const {getItemValue, migrate} = this.props;\n    const {multiDraftValue} = this.state;\n    let newValue;\n    if (!migrate) {\n      newValue = _.xorBy(multiDraftValue, [item], getItemValue || 'value');\n    } else {\n      newValue = _.xor(multiDraftValue, [item]);\n    }\n\n    this.setState({multiDraftValue: newValue});\n  };\n\n  cancelSelect = () => {\n    this.setState({multiDraftValue: this.state.multiFinalValue});\n    // this.toggleExpandableModal(false);\n    this.pickerExpandable.current?.closeExpandable?.();\n    this.props.topBarProps?.onCancel?.();\n  };\n\n  onDoneSelecting = item => {\n    this.clearSearchField();\n    this.setState({multiFinalValue: item});\n    // this.toggleExpandableModal(false);\n    this.pickerExpandable.current?.closeExpandable?.();\n    this.props.onChange?.(item);\n  };\n\n  onSearchChange = searchValue => {\n    this.setState({searchValue});\n    _.invoke(this.props, 'onSearchChange', searchValue);\n  };\n\n  onSelectedItemLayout = ({\n    nativeEvent: {\n      layout: {y}\n    }\n  }) => {\n    this.setState({selectedItemPosition: y});\n  };\n\n  clearSearchField = () => {\n    this.setState({searchValue: ''});\n  };\n\n  renderCustomModal = ({visible, toggleExpandable}) => {\n    const {renderCustomModal, children} = this.props;\n    const {multiDraftValue} = this.state;\n\n    if (renderCustomModal) {\n      const modalProps = {\n        visible,\n        toggleModal: toggleExpandable,\n        onSearchChange: this.onSearchChange,\n        children,\n        // onDone is relevant to multi mode only\n        onDone: () => this.onDoneSelecting(multiDraftValue),\n        onCancel: this.cancelSelect\n      };\n\n      return renderCustomModal(modalProps);\n    }\n  };\n\n  // TODO: Rename to renderExpandableContent\n  renderExpandableModal = () => {\n    const {\n      mode,\n      enableModalBlur,\n      topBarProps,\n      showSearch,\n      onShow,\n      searchStyle,\n      searchPlaceholder,\n      renderCustomSearch,\n      // renderCustomModal,\n      listProps,\n      // children,\n      testID,\n      pickerModalProps\n    } = this.props;\n    const {showExpandableModal, selectedItemPosition, multiDraftValue} = this.state;\n\n    // if (renderCustomModal) {\n    //   const modalProps = {\n    //     visible: showExpandableModal,\n    //     toggleModal: this.toggleExpandableModal,\n    //     onSearchChange: this.onSearchChange,\n    //     children,\n    //     onDone: () => this.onDoneSelecting(multiDraftValue),\n    //     onCancel: this.cancelSelect\n    //   };\n\n    //   return (\n    //     <>\n    //       {/* <PickerContext.Provider value={this.getContextValue()}> */}\n    //       {renderCustomModal(modalProps)}\n    //       {/* </PickerContext.Provider> */}\n    //     </>\n    //   );\n    // }\n\n    return (\n      // <PickerContext.Provider value={this.getContextValue()}>\n      <PickerModal\n        testID={`${testID}.modal`}\n        visible={showExpandableModal}\n        scrollPosition={selectedItemPosition}\n        enableModalBlur={enableModalBlur}\n        topBarProps={{\n          ...topBarProps,\n          onCancel: this.cancelSelect,\n          onDone: mode === Picker.modes.MULTI ? () => this.onDoneSelecting(multiDraftValue) : undefined\n        }}\n        showSearch={showSearch}\n        searchStyle={searchStyle}\n        searchPlaceholder={searchPlaceholder}\n        onSearchChange={this.onSearchChange}\n        renderCustomSearch={renderCustomSearch}\n        listProps={listProps}\n        onShow={onShow}\n        pickerModalProps={pickerModalProps}\n      >\n        {this.children}\n      </PickerModal>\n      // </PickerContext.Provider>\n    );\n  };\n\n  render() {\n    const {\n      useNativePicker,\n      renderPicker,\n      customPickerProps,\n      containerStyle,\n      testID,\n      onShow,\n      renderCustomModal,\n      forwardedRef,\n      modifiers,\n      enableModalBlur,\n      topBarProps,\n      pickerModalProps,\n      value,\n      editable\n    } = this.props;\n\n    if (useNativePicker) {\n      return <NativePicker {...this.props}/>;\n    }\n\n    // if (_.isFunction(renderPicker)) {\n    //   const {value} = this.props;\n\n    //   return (\n    //     <PickerContext.Provider value={this.getContextValue()}>\n    //       <View left>\n    //         <Button {...customPickerProps} link onPress={this.handlePickerOnPress} testID={testID}>\n    //           {renderPicker(value, this.getLabel(value))}\n    //         </Button>\n    //         {this.renderExpandableModal()}\n    //       </View>\n    //     </PickerContext.Provider>\n    //   );\n    // }\n\n    const textInputProps = TextField.extractOwnProps(this.props);\n    const label = this.getLabelValueText();\n    const {paddings, margins, positionStyle} = modifiers;\n\n    const modalProps = {\n      animationType: 'slide',\n      transparent: Constants.isIOS && enableModalBlur,\n      enableModalBlur: Constants.isIOS && enableModalBlur,\n      onRequestClose: topBarProps?.onCancel,\n      onShow,\n      ...pickerModalProps\n    };\n\n    return (\n      <PickerContext.Provider value={this.getContextValue()}>\n        <ExpandableOverlay\n          ref={this.pickerExpandable}\n          modalProps={modalProps}\n          expandableContent={this.renderExpandableModal()}\n          renderCustomOverlay={renderCustomModal ? this.renderCustomModal : undefined}\n          testID={testID}\n          {...customPickerProps}\n          disabled={editable === false}\n        >\n          {renderPicker ? (\n            renderPicker(value, this.getLabel(value))\n          ) : (\n            <TextField\n              ref={forwardedRef}\n              {...textInputProps}\n              testID={`${testID}.input`}\n              containerStyle={[paddings, margins, positionStyle, containerStyle]}\n              {...this.getAccessibilityInfo()}\n              importantForAccessibility={'no-hide-descendants'}\n              value={label}\n              selection={Constants.isAndroid ? {start: 0} : undefined}\n              // Disable TextField expandable feature\n              expandable={false}\n              renderExpandable={_.noop}\n              onToggleExpandableModal={_.noop}\n            />\n          )}\n        </ExpandableOverlay>\n      </PickerContext.Provider>\n    );\n  }\n}\n\nPicker.Item = PickerItem;\n\nexport {Picker}; // For tests\nexport default asBaseComponent(forwardRef(Picker));\n"]},"metadata":{},"sourceType":"module"}