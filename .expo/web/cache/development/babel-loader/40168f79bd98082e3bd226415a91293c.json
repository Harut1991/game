{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport GameClass from \"../Classes/Game\";\nimport Flask from \"../Components/Flask\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Game(_ref) {\n  var level = _ref.level;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      config = _useState4[0],\n      setConfig = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      game = _useState6[0],\n      setGame = _useState6[1];\n\n  var init = useCallback(function () {\n    var gameClass = new GameClass();\n    gameClass.start(level);\n    setGame(gameClass);\n  }, [level, setGame]);\n  var dataHandler = useCallback(function () {\n    if (game) {\n      setData(game.data);\n      setConfig(game.currentComplications);\n    }\n  }, [game, setData]);\n  var onClickFlask = useCallback(function (index) {\n    alert(index);\n  }, []);\n  var viewData = useMemo(function () {\n    if (data != null && data.mixedData) {\n      return data == null ? void 0 : data.mixedData.map(function (i, index) {\n        return _jsx(Flask, {\n          onClick: function onClick() {\n            return onClickFlask(index);\n          },\n          total: data.flaskTotal[index],\n          ball: i,\n          config: config\n        }, i.toString());\n      });\n      console.log(data == null ? void 0 : data.mixedData);\n    } else return _jsx(ActivityIndicator, {});\n  }, [data, game, config, onClickFlask]);\n  useEffect(init, [level]);\n  useEffect(dataHandler, [game]);\n  return _jsx(\"div\", {\n    className: \"game-container\",\n    children: viewData\n  });\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/src/Containers/Game.js"],"names":["useCallback","useEffect","useMemo","useState","GameClass","Flask","Game","level","data","setData","config","setConfig","game","setGame","init","gameClass","start","dataHandler","currentComplications","onClickFlask","index","alert","viewData","mixedData","map","i","flaskTotal","toString","console","log"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;;AAEA,OAAOC,SAAP;AACA,OAAOC,KAAP;;AAEA,eAAe,SAASC,IAAT,OAAuB;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAClC,kBAAuBJ,QAAQ,CAAC,EAAD,CAA/B;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA4BN,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOO,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAwBR,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOS,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,IAAI,GAAGd,WAAW,CAAC,YAAK;AAC1B,QAAMe,SAAS,GAAG,IAAIX,SAAJ,EAAlB;AACAW,IAAAA,SAAS,CAACC,KAAV,CAAgBT,KAAhB;AACAM,IAAAA,OAAO,CAACE,SAAD,CAAP;AACH,GAJuB,EAIrB,CAACR,KAAD,EAAQM,OAAR,CAJqB,CAAxB;AAMA,MAAMI,WAAW,GAAGjB,WAAW,CAAC,YAAK;AACjC,QAAIY,IAAJ,EAAS;AACLH,MAAAA,OAAO,CAACG,IAAI,CAACJ,IAAN,CAAP;AACAG,MAAAA,SAAS,CAACC,IAAI,CAACM,oBAAN,CAAT;AACH;AACJ,GAL8B,EAK5B,CAACN,IAAD,EAAOH,OAAP,CAL4B,CAA/B;AAOA,MAAMU,YAAY,GAACnB,WAAW,CAAC,UAACoB,KAAD,EAAS;AACpCC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH,GAF6B,EAE3B,EAF2B,CAA9B;AAIA,MAAME,QAAQ,GAAGpB,OAAO,CAAC,YAAK;AAC1B,QAAIM,IAAJ,YAAIA,IAAI,CAAEe,SAAV,EAAoB;AAChB,aAAOf,IAAP,oBAAOA,IAAI,CAAEe,SAAN,CAAgBC,GAAhB,CAAoB,UAACC,CAAD,EAAIL,KAAJ,EAAc;AACrC,eAAO,KAAC,KAAD;AAAO,UAAA,OAAO,EAAE;AAAA,mBAAMD,YAAY,CAACC,KAAD,CAAlB;AAAA,WAAhB;AAA2C,UAAA,KAAK,EAAEZ,IAAI,CAACkB,UAAL,CAAgBN,KAAhB,CAAlD;AAA6F,UAAA,IAAI,EAAEK,CAAnG;AAAsG,UAAA,MAAM,EAAEf;AAA9G,WAA+Ee,CAAC,CAACE,QAAF,EAA/E,CAAP;AACH,OAFM,CAAP;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ,oBAAYA,IAAI,CAAEe,SAAlB;AACH,KALD,MAKO,OAAO,KAAC,iBAAD,KAAP;AACV,GAPuB,EAOrB,CAACf,IAAD,EAAOI,IAAP,EAAaF,MAAb,EAAqBS,YAArB,CAPqB,CAAxB;AASAlB,EAAAA,SAAS,CAACa,IAAD,EAAO,CAACP,KAAD,CAAP,CAAT;AACAN,EAAAA,SAAS,CAACgB,WAAD,EAAc,CAACL,IAAD,CAAd,CAAT;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cACKU;AADL,IADJ;AAKH","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { ActivityIndicator } from 'react-native';\r\nimport GameClass from '../Classes/Game';\r\nimport Flask from '../Components/Flask';\r\n\r\nexport default function Game({level}) {\r\n    const [data, setData] =useState({});\r\n    const [config, setConfig] = useState({});\r\n    const [game, setGame] = useState(false);\r\n\r\n    const init = useCallback(()=> {\r\n        const gameClass = new GameClass();\r\n        gameClass.start(level);\r\n        setGame(gameClass);\r\n    }, [level, setGame]);\r\n\r\n    const dataHandler = useCallback(()=> {\r\n        if (game){\r\n            setData(game.data);\r\n            setConfig(game.currentComplications);\r\n        }\r\n    }, [game, setData]);\r\n\r\n    const onClickFlask=useCallback((index)=>{\r\n        alert(index)\r\n    }, []);\r\n\r\n    const viewData = useMemo(()=> {\r\n        if (data?.mixedData){\r\n            return data?.mixedData.map((i, index) => {\r\n                return <Flask onClick={() => onClickFlask(index)} total={data.flaskTotal[index]} key={i.toString()} ball={i} config={config} />\r\n            });\r\n            console.log(data?.mixedData)\r\n        } else return <ActivityIndicator />;\r\n    }, [data, game, config, onClickFlask]);\r\n\r\n    useEffect(init, [level]);\r\n    useEffect(dataHandler, [game]);\r\n\r\n    return (\r\n        <div className=\"game-container\">\r\n            {viewData}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}