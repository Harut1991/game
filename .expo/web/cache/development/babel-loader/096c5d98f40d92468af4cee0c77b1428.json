{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors, Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_NUM_COLUMNS = 3;\nvar DEFAULT_ITEM_SPACINGS = Spacings.s4;\n\nvar GridView = function (_UIComponent) {\n  _inherits(GridView, _UIComponent);\n\n  var _super = _createSuper(GridView);\n\n  function GridView() {\n    var _this;\n\n    _classCallCheck(this, GridView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      viewWidth: _this.getGridContainerWidth(),\n      numColumns: _this.calcNumberOfColumns(),\n      itemSize: _this.calcItemSize()\n    };\n\n    _this.onOrientationChanged = function () {\n      var keepItemSize = _this.props.keepItemSize;\n      var itemSize = _this.state.itemSize;\n\n      if (!_this.props.viewWidth) {\n        var newItemSize = keepItemSize ? itemSize : _this.calcItemSize();\n\n        _this.setState({\n          viewWidth: Math.floor(_this.getDefaultViewWidth()),\n          numColumns: _this.calcNumberOfColumns(),\n          itemSize: newItemSize\n        });\n      }\n    };\n\n    _this.renderItem = function (item, index) {\n      var _item$itemSize;\n\n      var itemSize = _this.state.itemSize;\n      var _this$props = _this.props,\n          items = _this$props.items,\n          itemSpacing = _this$props.itemSpacing;\n      var _this$state$numColumn = _this.state.numColumns,\n          numColumns = _this$state$numColumn === void 0 ? DEFAULT_NUM_COLUMNS : _this$state$numColumn;\n\n      var itemsCount = _.size(items);\n\n      var rowCount = Math.ceil(itemsCount / numColumns);\n      var isLastItemInRow = (index + 1) % numColumns === 0;\n      var isLastRow = index + 1 > (rowCount - 1) * numColumns;\n      var isLastItem = index === itemsCount - 1;\n      var size = typeof item.itemSize === 'object' ? {\n        width: itemSize,\n        height: ((_item$itemSize = item.itemSize) == null ? void 0 : _item$itemSize.height) || itemSize\n      } : itemSize;\n      return _jsx(GridListItem, _objectSpread(_objectSpread({}, item), {}, {\n        itemSize: size,\n        containerStyle: [!isLastItemInRow && {\n          marginRight: itemSpacing\n        }, !isLastRow && {\n          marginBottom: itemSpacing\n        }, item.containerStyle],\n        children: isLastItem && _this.renderLastItemOverlay()\n      }), index);\n    };\n\n    return _this;\n  }\n\n  _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"getDefaultViewWidth\",\n    value: function getDefaultViewWidth() {\n      return Constants.screenWidth - Spacings.s5 * 2;\n    }\n  }, {\n    key: \"getGridContainerWidth\",\n    value: function getGridContainerWidth() {\n      return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n    }\n  }, {\n    key: \"calcNumberOfColumns\",\n    value: function calcNumberOfColumns() {\n      var _this$props2 = this.props,\n          numColumns = _this$props2.numColumns,\n          _this$props2$itemSpac = _this$props2.itemSpacing,\n          itemSpacing = _this$props2$itemSpac === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props2$itemSpac,\n          maxItemWidth = _this$props2.maxItemWidth;\n      var containerWidth = this.getGridContainerWidth();\n\n      if (maxItemWidth) {\n        return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n      } else {\n        return numColumns || DEFAULT_NUM_COLUMNS;\n      }\n    }\n  }, {\n    key: \"calcItemSize\",\n    value: function calcItemSize() {\n      var _this$props$itemSpaci = this.props.itemSpacing,\n          itemSpacing = _this$props$itemSpaci === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props$itemSpaci;\n      var containerWidth = this.getGridContainerWidth();\n      var numColumns = this.calcNumberOfColumns();\n      return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n    }\n  }, {\n    key: \"getThemeColor\",\n    value: function getThemeColor(placeColor) {\n      if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n        return Colors.black;\n      } else if (Colors.isDark(placeColor)) {\n        return placeColor;\n      } else {\n        return Colors.getColorTint(placeColor, 30);\n      }\n    }\n  }, {\n    key: \"renderLastItemOverlay\",\n    value: function renderLastItemOverlay() {\n      var _this$props$lastItemO;\n\n      var _this$props3 = this.props,\n          lastItemLabel = _this$props3.lastItemLabel,\n          items = _this$props3.items;\n      var overlayColor = this.getThemeColor((_this$props$lastItemO = this.props.lastItemOverlayColor) != null ? _this$props$lastItemO : '');\n      var formattedLabel = formatLastItemLabel(lastItemLabel, {\n        shouldAddPlus: true\n      });\n\n      if (!lastItemLabel) {\n        return;\n      }\n\n      var imageBorderRadius = _.chain(items).first().get('imageProps.borderRadius').value();\n\n      return _jsx(View, {\n        style: [styles.overlayContainer, {\n          backgroundColor: Colors.rgba(overlayColor, 0.6),\n          borderRadius: imageBorderRadius\n        }],\n        children: _jsx(Text, {\n          mainBold: true,\n          white: true,\n          children: formattedLabel\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var itemSize = this.state.itemSize;\n      var _this$props4 = this.props,\n          items = _this$props4.items,\n          viewWidth = _this$props4.viewWidth;\n      return _jsx(View, {\n        style: [styles.container, {\n          width: viewWidth ? Math.floor(viewWidth) : undefined\n        }],\n        children: itemSize && _.map(items, this.renderItem)\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var viewWidth;\n      var numColumns;\n\n      if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n        viewWidth = Math.floor(nextProps.viewWidth);\n      }\n\n      if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n        numColumns = nextProps.numColumns;\n      }\n\n      if (viewWidth || viewWidth) {\n        return {\n          viewWidth: viewWidth,\n          numColumns: numColumns\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return GridView;\n}(UIComponent);\n\nGridView.displayName = 'GridView';\nGridView.defaultProps = {\n  numColumns: DEFAULT_NUM_COLUMNS,\n  itemSpacing: DEFAULT_ITEM_SPACINGS\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center',\n    justifyContent: 'center'\n  })\n});\nexport default GridView;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/node_modules/react-native-ui-lib/src/components/gridView/index.js"],"names":["_","React","Colors","Spacings","UIComponent","View","Text","Constants","GridListItem","formatLastItemLabel","DEFAULT_NUM_COLUMNS","DEFAULT_ITEM_SPACINGS","s4","GridView","state","viewWidth","getGridContainerWidth","numColumns","calcNumberOfColumns","itemSize","calcItemSize","onOrientationChanged","keepItemSize","props","newItemSize","setState","Math","floor","getDefaultViewWidth","renderItem","item","index","items","itemSpacing","itemsCount","size","rowCount","ceil","isLastItemInRow","isLastRow","isLastItem","width","height","marginRight","marginBottom","containerStyle","renderLastItemOverlay","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","screenWidth","s5","maxItemWidth","containerWidth","placeColor","toLower","white","black","isDark","getColorTint","lastItemLabel","overlayColor","getThemeColor","lastItemOverlayColor","formattedLabel","shouldAddPlus","imageBorderRadius","chain","first","get","value","styles","overlayContainer","backgroundColor","rgba","borderRadius","container","undefined","map","nextProps","prevState","displayName","defaultProps","StyleSheet","create","flexDirection","flexWrap","absoluteFillObject","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors, Spacings } from \"../../style\"; // TODO: we should use asBaseComponent here instead of using UIComponent directly\n\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nconst DEFAULT_NUM_COLUMNS = 3;\nconst DEFAULT_ITEM_SPACINGS = Spacings.s4;\n\n/**\n * @description: A auto-generated grid view that calculate item size according to given props\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridView extends UIComponent {\n  static displayName = 'GridView';\n  static defaultProps = {\n    numColumns: DEFAULT_NUM_COLUMNS,\n    itemSpacing: DEFAULT_ITEM_SPACINGS\n  };\n  state = {\n    viewWidth: this.getGridContainerWidth(),\n    numColumns: this.calcNumberOfColumns(),\n    itemSize: this.calcItemSize()\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let viewWidth;\n    let numColumns;\n\n    if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n      viewWidth = Math.floor(nextProps.viewWidth);\n    }\n\n    if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n      numColumns = nextProps.numColumns;\n    }\n\n    if (viewWidth || viewWidth) {\n      return {\n        viewWidth,\n        numColumns\n      };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n\n  onOrientationChanged = () => {\n    const {\n      keepItemSize\n    } = this.props;\n    const {\n      itemSize\n    } = this.state;\n\n    if (!this.props.viewWidth) {\n      const newItemSize = keepItemSize ? itemSize : this.calcItemSize();\n      this.setState({\n        viewWidth: Math.floor(this.getDefaultViewWidth()),\n        numColumns: this.calcNumberOfColumns(),\n        itemSize: newItemSize\n      });\n    }\n  };\n\n  getDefaultViewWidth() {\n    return Constants.screenWidth - Spacings.s5 * 2;\n  }\n\n  getGridContainerWidth() {\n    return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n  }\n\n  calcNumberOfColumns() {\n    const {\n      numColumns,\n      itemSpacing = DEFAULT_ITEM_SPACINGS,\n      maxItemWidth\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n\n    if (maxItemWidth) {\n      return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n    } else {\n      return numColumns || DEFAULT_NUM_COLUMNS;\n    }\n  }\n\n  calcItemSize() {\n    const {\n      itemSpacing = DEFAULT_ITEM_SPACINGS\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    const numColumns = this.calcNumberOfColumns();\n    return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n  }\n\n  getThemeColor(placeColor) {\n    if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n      return Colors.black;\n    } else if (Colors.isDark(placeColor)) {\n      return placeColor;\n    } else {\n      return Colors.getColorTint(placeColor, 30);\n    }\n  }\n\n  renderLastItemOverlay() {\n    const {\n      lastItemLabel,\n      items\n    } = this.props;\n    const overlayColor = this.getThemeColor(this.props.lastItemOverlayColor ?? '');\n    const formattedLabel = formatLastItemLabel(lastItemLabel, {\n      shouldAddPlus: true\n    });\n\n    if (!lastItemLabel) {\n      return;\n    }\n\n    const imageBorderRadius = _.chain(items).first().get('imageProps.borderRadius').value();\n\n    return <View style={[styles.overlayContainer, {\n      backgroundColor: Colors.rgba(overlayColor, 0.6),\n      borderRadius: imageBorderRadius\n    }]}>\n        <Text mainBold white>\n          {formattedLabel}\n        </Text>\n      </View>;\n  }\n\n  renderItem = (item, index) => {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      itemSpacing\n    } = this.props;\n    const {\n      numColumns = DEFAULT_NUM_COLUMNS\n    } = this.state;\n\n    const itemsCount = _.size(items);\n\n    const rowCount = Math.ceil(itemsCount / numColumns);\n    const isLastItemInRow = (index + 1) % numColumns === 0;\n    const isLastRow = index + 1 > (rowCount - 1) * numColumns;\n    const isLastItem = index === itemsCount - 1;\n    const size = typeof item.itemSize === 'object' ? {\n      width: itemSize,\n      height: item.itemSize?.height || itemSize\n    } : itemSize;\n    return <GridListItem key={index} {...item} itemSize={size} containerStyle={[!isLastItemInRow && {\n      marginRight: itemSpacing\n    }, !isLastRow && {\n      marginBottom: itemSpacing\n    }, item.containerStyle]}>\n        {isLastItem && this.renderLastItemOverlay()}\n      </GridListItem>;\n  };\n\n  render() {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      viewWidth\n    } = this.props;\n    return <View style={[styles.container, {\n      width: viewWidth ? Math.floor(viewWidth) : undefined\n    }]}>\n        {itemSize && _.map(items, this.renderItem)}\n      </View>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: { ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default GridView;"]},"metadata":{},"sourceType":"module"}