{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { useSharedValue, useAnimatedStyle, withSpring, withTiming } from 'react-native-reanimated';\nimport { PanningDirectionsEnum } from \"../panView\";\nexport var TransitionViewDirectionEnum = PanningDirectionsEnum;\nvar DEFAULT_ANIMATION_VELOCITY = 300;\nvar DEFAULT_ANIMATION_CONFIG = {\n  velocity: DEFAULT_ANIMATION_VELOCITY,\n  damping: 18,\n  stiffness: 100,\n  mass: 0.4\n};\nexport default function useAnimatedTranslator(props) {\n  var initialVisibility = props.initialVisibility;\n  var translateX = useSharedValue(0);\n  var translateY = useSharedValue(0);\n  var visible = useSharedValue(initialVisibility);\n  var init = useCallback(function (to, animationDirection, callback) {\n    'worklet';\n\n    if ([TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(animationDirection)) {\n      translateX.value = withTiming(to.x, {\n        duration: 0\n      }, callback);\n    } else if ([TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(animationDirection)) {\n      translateY.value = withTiming(to.y, {\n        duration: 0\n      }, callback);\n    }\n\n    visible.value = true;\n  }, []);\n  var animate = useCallback(function (to, animationDirection, callback) {\n    'worklet';\n\n    if ([TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(animationDirection)) {\n      translateX.value = withSpring(to.x, DEFAULT_ANIMATION_CONFIG, callback);\n    } else if ([TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(animationDirection)) {\n      translateY.value = withSpring(to.y, DEFAULT_ANIMATION_CONFIG, callback);\n    }\n  }, []);\n  var animatedStyle = useAnimatedStyle(function () {\n    return {\n      transform: [{\n        translateX: translateX.value\n      }, {\n        translateY: translateY.value\n      }],\n      opacity: Number(visible.value)\n    };\n  }, []);\n  return {\n    init: init,\n    animate: animate,\n    animatedStyle: animatedStyle\n  };\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/node_modules/react-native-ui-lib/src/incubator/TransitionView/useAnimatedTranslator.js"],"names":["React","useCallback","useSharedValue","useAnimatedStyle","withSpring","withTiming","PanningDirectionsEnum","TransitionViewDirectionEnum","DEFAULT_ANIMATION_VELOCITY","DEFAULT_ANIMATION_CONFIG","velocity","damping","stiffness","mass","useAnimatedTranslator","props","initialVisibility","translateX","translateY","visible","init","to","animationDirection","callback","LEFT","RIGHT","includes","value","x","duration","UP","DOWN","y","animate","animatedStyle","transform","opacity","Number"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { useSharedValue, useAnimatedStyle, withSpring, withTiming } from 'react-native-reanimated';\nimport { PanningDirectionsEnum } from \"../panView\";\nexport const TransitionViewDirectionEnum = PanningDirectionsEnum;\nconst DEFAULT_ANIMATION_VELOCITY = 300;\nconst DEFAULT_ANIMATION_CONFIG = {\n  velocity: DEFAULT_ANIMATION_VELOCITY,\n  damping: 18,\n  stiffness: 100,\n  mass: 0.4\n};\nexport default function useAnimatedTranslator(props) {\n  const {\n    initialVisibility\n  } = props; // Has to start at {0, 0} with {opacity: 0} so layout can be measured\n\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n  const visible = useSharedValue(initialVisibility);\n  const init = useCallback((to, animationDirection, callback) => {\n    'worklet'; // @ts-expect-error\n\n    if ([TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(animationDirection)) {\n      translateX.value = withTiming(to.x, {\n        duration: 0\n      }, callback); // @ts-expect-error\n    } else if ([TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(animationDirection)) {\n      translateY.value = withTiming(to.y, {\n        duration: 0\n      }, callback);\n    }\n\n    visible.value = true;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const animate = useCallback((to, animationDirection, callback) => {\n    'worklet'; // @ts-expect-error\n\n    if ([TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(animationDirection)) {\n      translateX.value = withSpring(to.x, DEFAULT_ANIMATION_CONFIG, callback); // @ts-expect-error\n    } else if ([TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(animationDirection)) {\n      translateY.value = withSpring(to.y, DEFAULT_ANIMATION_CONFIG, callback);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{\n        translateX: translateX.value\n      }, {\n        translateY: translateY.value\n      }],\n      // TODO: do we want to take the component's opacity here? - I think combining opacities is buggy\n      opacity: Number(visible.value)\n    };\n  }, []);\n  return {\n    init,\n    animate,\n    animatedStyle\n  };\n}"]},"metadata":{},"sourceType":"module"}