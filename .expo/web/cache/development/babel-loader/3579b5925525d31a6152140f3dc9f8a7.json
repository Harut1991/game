{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { default as KeyboardTrackingViewIOS } from \"./KeyboardTrackingView.ios\";\nimport { default as KeyboardTrackingViewAndroid } from \"./KeyboardTrackingView.android\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar isAndroid = Platform.OS === 'android';\n\nvar KeyboardTrackingView = function KeyboardTrackingView(_ref, ref) {\n  var children = _ref.children,\n      others = _objectWithoutProperties(_ref, _excluded);\n\n  var KeyboardTrackingViewContainer = isAndroid ? KeyboardTrackingViewAndroid : KeyboardTrackingViewIOS;\n  return _jsx(KeyboardTrackingViewContainer, _objectSpread(_objectSpread({}, others), {}, {\n    ref: ref,\n    children: children\n  }));\n};\n\nKeyboardTrackingView.propTypes = {\n  trackInteractive: _pt.bool,\n  useSafeArea: _pt.bool,\n  scrollToFocusedInput: _pt.bool,\n  scrollBehavior: _pt.number,\n  revealKeyboardInteractive: _pt.bool,\n  manageScrollView: _pt.bool,\n  requiresSameParentToManageScrollView: _pt.bool,\n  addBottomView: _pt.bool,\n  allowHitsOutsideBounds: _pt.bool,\n  ref: _pt.any\n};\nexport default forwardRef(KeyboardTrackingView);","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Harut/game-expo/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardTracking/KeyboardTrackingView/index.js"],"names":["_pt","React","forwardRef","default","KeyboardTrackingViewIOS","KeyboardTrackingViewAndroid","isAndroid","Platform","OS","KeyboardTrackingView","ref","children","others","KeyboardTrackingViewContainer","propTypes","trackInteractive","bool","useSafeArea","scrollToFocusedInput","scrollBehavior","number","revealKeyboardInteractive","manageScrollView","requiresSameParentToManageScrollView","addBottomView","allowHitsOutsideBounds","any"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,SAASC,OAAO,IAAIC,uBAApB;AACA,SAASD,OAAO,IAAIE,2BAApB;;AACA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAlC;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAG1BC,GAH0B,EAGlB;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,MADNC,MACM;;AACT,MAAMC,6BAA6B,GAAGP,SAAS,GAAGD,2BAAH,GAAiCD,uBAAhF;AACA,SAAO,KAAC,6BAAD,kCAAmCQ,MAAnC;AAA2C,IAAA,GAAG,EAAEF,GAAhD;AAAA,cACFC;AADE,KAAP;AAGD,CARD;;AAUAF,oBAAoB,CAACK,SAArB,GAAiC;AAU/BC,EAAAA,gBAAgB,EAAEf,GAAG,CAACgB,IAVS;AAe/BC,EAAAA,WAAW,EAAEjB,GAAG,CAACgB,IAfc;AAgB/BE,EAAAA,oBAAoB,EAAElB,GAAG,CAACgB,IAhBK;AAiB/BG,EAAAA,cAAc,EAAEnB,GAAG,CAACoB,MAjBW;AAkB/BC,EAAAA,yBAAyB,EAAErB,GAAG,CAACgB,IAlBA;AAmB/BM,EAAAA,gBAAgB,EAAEtB,GAAG,CAACgB,IAnBS;AAoB/BO,EAAAA,oCAAoC,EAAEvB,GAAG,CAACgB,IApBX;AAqB/BQ,EAAAA,aAAa,EAAExB,GAAG,CAACgB,IArBY;AAsB/BS,EAAAA,sBAAsB,EAAEzB,GAAG,CAACgB,IAtBG;AAyB/BN,EAAAA,GAAG,EAAEV,GAAG,CAAC0B;AAzBsB,CAAjC;AA2BA,eAAexB,UAAU,CAACO,oBAAD,CAAzB","sourcesContent":["import _pt from \"prop-types\";\nimport React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { default as KeyboardTrackingViewIOS } from \"./KeyboardTrackingView.ios\";\nimport { default as KeyboardTrackingViewAndroid } from \"./KeyboardTrackingView.android\";\nconst isAndroid = Platform.OS === 'android';\n\nconst KeyboardTrackingView = ({\n  children,\n  ...others\n}, ref) => {\n  const KeyboardTrackingViewContainer = isAndroid ? KeyboardTrackingViewAndroid : KeyboardTrackingViewIOS;\n  return <KeyboardTrackingViewContainer {...others} ref={ref}>\n      {children}\n    </KeyboardTrackingViewContainer>;\n};\n\nKeyboardTrackingView.propTypes = {\n  /**\n       * Enables tracking of the keyboard when it's dismissed interactively (false by default).\n       * Why? When using an external keyboard (BT),\n       * you still get the keyboard events and the view just hovers when you focus the input.\n       * Also, if you're not using interactive style of dismissing the keyboard\n       * (or if you don't have an input inside this view) it doesn't make sense to track it anyway.\n       * (This is caused because of the usage of inputAccessory to be able to track the\n       * keyboard interactive change and it introduces this bug)\n       */\n  trackInteractive: _pt.bool,\n\n  /**\n      * Allow control safe area\n      */\n  useSafeArea: _pt.bool,\n  scrollToFocusedInput: _pt.bool,\n  scrollBehavior: _pt.number,\n  revealKeyboardInteractive: _pt.bool,\n  manageScrollView: _pt.bool,\n  requiresSameParentToManageScrollView: _pt.bool,\n  addBottomView: _pt.bool,\n  allowHitsOutsideBounds: _pt.bool,\n\n  /* Can't figure out what it's supposed to be*/\n  ref: _pt.any\n};\nexport default forwardRef(KeyboardTrackingView);"]},"metadata":{},"sourceType":"module"}